[{"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/index.tsx":"1","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/App.tsx":"2","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/reportWebVitals.ts":"3","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/ApiConnection.ts":"4","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/uploadIMG.tsx":"5","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/seachCollection.tsx":"6","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/searchPart.tsx":"7","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinput.tsx":"8","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardShop.tsx":"9","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardCopyable.tsx":"10","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardinput.tsx":"11","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/successLotty.tsx":"12","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.tsx":"13","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/shoppingbag.tsx":"14","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/bagitemmodal.tsx":"15","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/validateassembly.tsx":"16","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/snackbar.tsx":"17","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/faillottly.tsx":"18","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/successlottly.tsx":"19","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/viewbuild.tsx":"20","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/visualiseAssembly.tsx":"21","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custominput.tsx":"22","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/fasta.tsx":"23","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/customShop.tsx":"24","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/MultipleCheck.tsx":"25","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/genbank.tsx":"26","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/SBOL.tsx":"27","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/export.tsx":"28","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/UniqueParts.Components/UniqueParts.tsx":"29","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/UniqueAssemblies.Components/UniqueAssemblies.tsx":"30","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/CSV.Components/csvcard.tsx":"31","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/JSON.Components/JSONCard.tsx":"32","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/home/hometext.tsx":"33","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/home/homeimg.tsx":"34","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/home/basicsynbio.tsx":"35","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/navbar/navbar.tsx":"36","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/Home.tsx":"37","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/Designer.tsx":"38","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/About.tsx":"39","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/AboutPapers.tsx":"40","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/AboutImages.tsx":"41"},{"size":419,"mtime":1611499149779,"results":"42","hashOfConfig":"43"},{"size":625,"mtime":1611769903361,"results":"44","hashOfConfig":"43"},{"size":425,"mtime":1611499054423,"results":"45","hashOfConfig":"43"},{"size":285,"mtime":1611504616835,"results":"46","hashOfConfig":"43"},{"size":595,"mtime":1611491114993,"results":"47","hashOfConfig":"43"},{"size":5419,"mtime":1611503687424,"results":"48","hashOfConfig":"43"},{"size":3483,"mtime":1611508355911,"results":"49","hashOfConfig":"43"},{"size":10400,"mtime":1611769097547,"results":"50","hashOfConfig":"43"},{"size":503,"mtime":1611509159830,"results":"51","hashOfConfig":"43"},{"size":3093,"mtime":1611509434144,"results":"52","hashOfConfig":"43"},{"size":3136,"mtime":1611509938244,"results":"53","hashOfConfig":"43"},{"size":592,"mtime":1611755391624,"results":"54","hashOfConfig":"43"},{"size":3622,"mtime":1611759735681,"results":"55","hashOfConfig":"43"},{"size":3904,"mtime":1611758386387,"results":"56","hashOfConfig":"43"},{"size":6877,"mtime":1611762327489,"results":"57","hashOfConfig":"43"},{"size":3202,"mtime":1611760908520,"results":"58","hashOfConfig":"43"},{"size":595,"mtime":1611760125004,"results":"59","hashOfConfig":"43"},{"size":860,"mtime":1611759857209,"results":"60","hashOfConfig":"43"},{"size":861,"mtime":1611760142606,"results":"61","hashOfConfig":"43"},{"size":5850,"mtime":1611770437894,"results":"62","hashOfConfig":"43"},{"size":6840,"mtime":1611770437843,"results":"63","hashOfConfig":"43"},{"size":4031,"mtime":1611765238901,"results":"64","hashOfConfig":"43"},{"size":4443,"mtime":1611764309910,"results":"65","hashOfConfig":"43"},{"size":492,"mtime":1611764601102,"results":"66","hashOfConfig":"43"},{"size":793,"mtime":1611765228719,"results":"67","hashOfConfig":"43"},{"size":4673,"mtime":1611764902109,"results":"68","hashOfConfig":"43"},{"size":2629,"mtime":1611765093607,"results":"69","hashOfConfig":"43"},{"size":1045,"mtime":1611766241789,"results":"70","hashOfConfig":"43"},{"size":1996,"mtime":1611766062286,"results":"71","hashOfConfig":"43"},{"size":2039,"mtime":1611766241811,"results":"72","hashOfConfig":"43"},{"size":1920,"mtime":1611766250897,"results":"73","hashOfConfig":"43"},{"size":1923,"mtime":1611766209462,"results":"74","hashOfConfig":"43"},{"size":1545,"mtime":1611766405101,"results":"75","hashOfConfig":"43"},{"size":1013,"mtime":1611766424130,"results":"76","hashOfConfig":"43"},{"size":10850,"mtime":1611768352225,"results":"77","hashOfConfig":"43"},{"size":2026,"mtime":1611768862579,"results":"78","hashOfConfig":"43"},{"size":831,"mtime":1611768934215,"results":"79","hashOfConfig":"43"},{"size":3408,"mtime":1611769097414,"results":"80","hashOfConfig":"43"},{"size":3013,"mtime":1611769199419,"results":"81","hashOfConfig":"43"},{"size":2239,"mtime":1611769151533,"results":"82","hashOfConfig":"43"},{"size":3398,"mtime":1611769166322,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1pqt787",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/index.tsx",[],["176","177"],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/App.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/reportWebVitals.ts",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/ApiConnection.ts",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/uploadIMG.tsx",[],["178","179"],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/seachCollection.tsx",["180","181"],"import React, { useState } from \"react\";\nimport {\n  Checkbox,\n  TextField,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  InputLabel,\n  Input,\n  FormControl,\n  Select,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport fetch from \"cross-fetch\";\nimport { ApiEndpoint } from \"../../../../../ApiConnection\";\nimport { Collection } from \"../../../../../interfaces/Collection\";\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n    marginTop: theme.spacing(2),\n    textAlign: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  formControl: {\n    marginTop: theme.spacing(1),\n    width: \"100%\",\n  },\n  selectcolumn: {\n    width: \"100%\",\n    paddingTop: \"10px\",\n  },\n}));\n\ninterface Props {\n  clickedCollections: Collection[];\n  setClickedCollections: React.Dispatch<React.SetStateAction<Collection[]>>;\n  collections: Collection[];\n  setCollections: React.Dispatch<React.SetStateAction<Collection[]>>;\n}\n\nexport const SearchCollection: React.FC<Props> = ({\n  clickedCollections,\n  setClickedCollections,\n  collections,\n  setCollections,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState<boolean>(false);\n  const loading = open && collections.length === 0;\n\n  //Popup Components\n  const [versionOpen, setVersionOpen] = useState<boolean>(false);\n  const [age, setAge] = React.useState<string>(\"\");\n  const handleChange = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    setAge(String(event.target.value) || \"\");\n  };\n\n  const handleVersionClose = () => {\n    setVersionOpen(false);\n  };\n\n  React.useEffect(() => {\n    let active = true;\n    if (!loading) {\n      return undefined;\n    }\n    (async () => {\n      const response = await fetch(ApiEndpoint + \"collections/names\");\n      const myresponse = await response.json();\n      if (active) {\n        setCollections(myresponse.data.map((item: string) => ({ name: item })));\n      }\n    })();\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setCollections([]);\n    }\n  }, [open]);\n\n  function HandleClickOnChip(event: any) {\n    setClickedCollections(\n      event.target.outerText.substring(0, event.target.outerText.length - 7)\n    );\n    setVersionOpen(true);\n  }\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Autocomplete\n          onChange={(event: any, value: string[]) => {\n            setClickedCollections(value.map((item) => ({ name: item })));\n            console.log(value);\n          }}\n          ChipProps={{ clickable: true, onClick: HandleClickOnChip }}\n          multiple\n          open={open}\n          onOpen={() => {\n            setOpen(true);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n          fullWidth\n          getOptionLabel={(option) => option + String(\" | v0.1\")}\n          options={collections.map((item) => item.name)}\n          loading={loading}\n          disableCloseOnSelect\n          renderOption={(option, { selected }) => (\n            <React.Fragment>\n              {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n              <Checkbox\n                icon={icon}\n                checkedIcon={checkedIcon}\n                style={{ marginRight: 8 }}\n                checked={selected}\n              />\n              {option}\n            </React.Fragment>\n          )}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              label=\"Add Collections in which you want to search from\"\n              placeholder=\"Search Collections\"\n            />\n          )}\n        />\n      </div>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        open={versionOpen}\n        onClose={handleVersionClose}\n      >\n        <DialogTitle>Select Desired Version</DialogTitle>\n        <Divider variant=\"middle\" />\n        <DialogContent>\n          <Typography color=\"textSecondary\">{clickedCollections}</Typography>\n          <form className={classes.container}>\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor=\"demo-dialog-native\">Version</InputLabel>\n              <Select\n                autoWidth\n                native\n                value={age}\n                onChange={handleChange}\n                input={<Input id=\"demo-dialog-native\" />}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                <option value={10}>v0.1</option>\n              </Select>\n            </FormControl>\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleVersionClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleVersionClose} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/searchPart.tsx",["182"],"import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport fetch from \"cross-fetch\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { ApiEndpoint } from \"../../../../../ApiConnection\";\nimport { Collection } from \"../../../../../interfaces/Collection\";\nimport { CollectionData } from \"../../../../../interfaces/CollectionData\";\nimport { Part } from \"../../../../../interfaces/Part\";\n\ninterface Props {\n  value: Part | undefined;\n  onChangeValue: React.Dispatch<React.SetStateAction<Part | undefined>>;\n  clickedCollections: Collection[];\n  partOptions: Part[];\n  setPartOptions: React.Dispatch<React.SetStateAction<Part[]>>;\n}\n\nexport const SearchPart: React.FC<Props> = ({\n  value,\n  onChangeValue,\n  clickedCollections,\n  partOptions,\n  setPartOptions,\n}) => {\n  const [inputValue, setInputValue] = React.useState<string>();\n  const [open, setOpen] = React.useState<boolean>(false);\n  const loading = open && partOptions.length === 0;\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n    (async () => {\n      if (clickedCollections.length === 0) {\n        setOpen(false);\n      }\n      const response = await fetch(ApiEndpoint + \"collections/data\");\n      console.log(response);\n      const myresponse = await response.json();\n      console.log(myresponse);\n      const collectionsData: CollectionData[] = myresponse.data;\n      console.log(collectionsData);\n      var mergedArray = [];\n\n      const clickedCollectionsArray = clickedCollections.map(\n        (item) => item.name\n      );\n\n      console.log(clickedCollectionsArray);\n\n      for (let selectedCollection of collectionsData) {\n        if (clickedCollectionsArray.includes(selectedCollection.name)) {\n          for (let part of selectedCollection.parts) {\n            console.log(part);\n            mergedArray.push(part);\n          }\n        }\n      }\n      if (active) {\n        console.log(mergedArray);\n        setPartOptions(mergedArray);\n      }\n      return () => {\n        active = false;\n      };\n    })();\n  }, [loading, clickedCollections]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setPartOptions([]);\n    }\n  }, [open, setPartOptions]);\n\n  return (\n    <Autocomplete\n      id=\"asynchronous-demo\"\n      style={{ width: \"100%\" }}\n      value={value}\n      onChange={(event: any, newValue: Part | null) => {\n        if (newValue !== null) {\n          onChangeValue(newValue);\n        }\n      }}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      getOptionSelected={(option, value) => value.label === option.label}\n      getOptionLabel={(option) => option.label}\n      options={partOptions}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Select Part\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinput.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardShop.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardCopyable.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardinput.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/successLotty.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/shoppingbag.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/bagitemmodal.tsx",["183","184","185"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\n// @ts-ignore\nimport { SeqViz } from \"seqviz\";\nimport { ApiEndpoint } from \"../../../../../ApiConnection\";\nimport { Part } from \"../../../../../interfaces/Part\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n  SeqVizDiv: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  item: Part;\n}\n\nexport const BagItemModal: React.FC<Props> = ({ open, handleClose, item }) => {\n  const classes = useStyles();\n  const [label, setLabel] = useState([]);\n  const [selectedQualifier, setSelectedQualifier] = useState(\"Feature\");\n  const [returnedSeq, setReturnedSeq] = useState(\"\");\n  const [annotationsSet, setAnnotationsSet] = useState([]);\n  const userWidth =\n    (window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth) - 65;\n  const userHeight =\n    (window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.body.clientHeight) - 120;\n\n  React.useEffect(() => {\n    if (!open) {\n      setLabel([]);\n      setSelectedQualifier(\"Feature\");\n    } else {\n      (async () => {\n        const responselabels = await fetch(ApiEndpoint + \"viewpartlabels\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(item),\n        });\n        const resultlabels = await responselabels.json();\n        setLabel(resultlabels);\n      })();\n    }\n  }, [open]);\n\n  function random_color() {\n    const colorCodes = [\n      \"#9DEAED\", // cyan\n      \"#8FDE8C\", // green\n      \"#CFF283\", // light green\n      \"#8CDEBD\", // teal\n      \"#F0A3CE\", // pink\n      \"#F7C672\", // orange\n      \"#F07F7F\", // red\n      \"#FAA887\", // red-orange\n      \"#F099F7\", // magenta\n      \"#C59CFF\", // purple\n      \"#6B81FF\", // blue\n      \"#85A6FF\", // light blue\n    ];\n    return colorCodes[Math.floor(Math.random() * colorCodes.length)];\n  }\n\n  function process(entry: any) {\n    if (entry)\n      return {\n        name: entry.name,\n        start: entry.start,\n        end: entry.end,\n        direction: entry.direction,\n        color: random_color(),\n      };\n    else return;\n  }\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        ApiEndpoint +\n          \"returnseqann?qualifier=\" +\n          JSON.stringify(selectedQualifier),\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(item),\n        }\n      );\n      try {\n        const result = await response.json();\n        var filtered = result.annotated.filter(Boolean);\n        var processed = filtered.map(process);\n        setAnnotationsSet(processed);\n        setReturnedSeq(result.seq);\n      } catch {\n        console.log(\"error filtering\");\n      }\n    })();\n  }, [selectedQualifier]);\n\n  const SeqVizComponent = () => {\n    if (selectedQualifier === \"Feature\") {\n      return (\n        <SeqViz\n          name=\"J23100\"\n          file={item ? item.binaryString : null}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    } else {\n      return (\n        <SeqViz\n          name=\"item\"\n          seq={returnedSeq}\n          annotations={annotationsSet}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        fullScreen\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h5\" className={classes.title}>\n              {item ? item.label : \"\"}\n            </Typography>\n            <Typography variant=\"h6\" className={classes.title}>\n              Current Annotation: {selectedQualifier}\n            </Typography>\n            <div>\n              <Autocomplete\n                color=\"white\"\n                id=\"item-qualifiers\"\n                options={label}\n                getOptionLabel={(option) => option}\n                value={selectedQualifier}\n                onChange={(event, newValue) => {\n                  if (newValue !== null) {\n                    setSelectedQualifier(newValue);\n                  }\n                }}\n                style={{\n                  width: 400,\n                  background: \"white\",\n                  borderRadius: \"5px\",\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Search Qualifiers to change Annotation...\"\n                    variant=\"filled\"\n                  />\n                )}\n              />\n            </div>\n          </Toolbar>\n        </AppBar>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            The selected part is from the collection:{\" \"}\n            {item ? item.collection : \"Custom\"}\n          </DialogContentText>\n          <div className={classes.SeqVizDiv}>\n            <SeqVizComponent />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/validateassembly.tsx",["186","187"],"import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport SuccessAnimation from \"./successlottly\";\nimport FailAnimation from \"./faillottly\";\nimport { ApiEndpoint } from \"../../../../ApiConnection\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport { Part } from \"../../../../interfaces/Part\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface Props {\n  setValidated: React.Dispatch<React.SetStateAction<boolean>>;\n  shoppingBagItems: Part[];\n  open: boolean;\n  handleClose: () => void;\n}\n\nexport const ValidateAssembly: React.FC<Props> = ({\n  setValidated,\n  shoppingBagItems,\n  open,\n  handleClose,\n}) => {\n  const [validation, setValidation] = useState(\"\");\n\n  React.useEffect(() => {\n    let active = true;\n    (async () => {\n      const response = await fetch(ApiEndpoint + \"validate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(shoppingBagItems),\n      });\n      const myresponse = await response.json();\n      if (String(myresponse.result) === \"success\") {\n        setValidation(String(myresponse.result));\n        setValidated(true);\n      } else {\n        setValidation(String(myresponse.error));\n        setValidated(false);\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [open]);\n\n  function FailSuccess() {\n    return validation === \"success\" ? <SuccessAnimation /> : <FailAnimation />;\n  }\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle\n          id=\"alert-dialog-slide-title\"\n          style={{ textAlign: \"center\" }}\n        >\n          Validation\n        </DialogTitle>\n        <Divider />\n        <DialogContent>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-around\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item>\n              <FailSuccess />\n            </Grid>\n            <Grid item>\n              <DialogContentText id=\"alert-dialog-slide-description\">\n                Result of Validation: {validation}\n              </DialogContentText>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/snackbar.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/faillottly.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/successlottly.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/viewbuild.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/visualiseAssembly.tsx",["188","189","190","191","192","193","194"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n// @ts-ignore\nimport { SeqViz } from \"seqviz\";\nimport { ApiEndpoint } from \"../../../../ApiConnection\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport { Part } from \"../../../../interfaces/Part\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n  SeqVizDiv: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\ninterface Props {\n  shoppingBagItems: Part[];\n  open: boolean;\n  handleClose: () => void;\n}\n\nexport const VisualiseAssembly: React.FC<Props> = ({\n  shoppingBagItems,\n  open,\n  handleClose,\n}) => {\n  const classes = useStyles();\n  const [seqLabel, setSeqLabel] = useState([\"Feature\"]);\n  const [selectedSeqQualifier, setSelectedSeqQualifier] = useState(\"Feature\");\n  const [assemblySequence, setAssemblySequence] = useState(\"\");\n  const [assemblySequenceErr, setAssemblySequenceErr] = useState(\"\");\n  const [returnSeq, setReturnSeq] = useState(\"\");\n  const [annotationsSeqSet, setAnnotationsSeqSet] = useState([]);\n  const userWidth =\n    (window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth) - 65;\n  const userHeight =\n    window.innerHeight ||\n    document.documentElement.clientHeight ||\n    document.body.clientHeight - 120;\n\n  //////\n  React.useEffect(() => {\n    (async () => {\n      const responselabels = await fetch(ApiEndpoint + \"viewseqlabels\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(shoppingBagItems),\n      });\n      const resultlabels = await responselabels.json();\n      if (!resultlabels.error) setSeqLabel(resultlabels);\n    })();\n  }, [open]);\n\n  function random_color() {\n    const colorCodes = [\n      \"#9DEAED\", // cyan\n      \"#8FDE8C\", // green\n      \"#CFF283\", // light green\n      \"#8CDEBD\", // teal\n      \"#F0A3CE\", // pink\n      \"#F7C672\", // orange\n      \"#F07F7F\", // red\n      \"#FAA887\", // red-orange\n      \"#F099F7\", // magenta\n      \"#C59CFF\", // purple\n      \"#6B81FF\", // blue\n      \"#85A6FF\", // light blue\n    ];\n    return colorCodes[Math.floor(Math.random() * colorCodes.length)];\n  }\n\n  function process(entry: any) {\n    if (entry)\n      return {\n        name: entry.name,\n        start: entry.start,\n        end: entry.end,\n        direction: entry.direction,\n        color: random_color(),\n      };\n    else return;\n  }\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        ApiEndpoint +\n          \"assemblySeq?qualifier=\" +\n          JSON.stringify(selectedSeqQualifier),\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(shoppingBagItems),\n        }\n      );\n      const result = await response.json();\n      if (!result.err) {\n        try {\n          var filtered = result.annotated.filter(Boolean);\n          var processed = filtered.map(process);\n          setAnnotationsSeqSet(processed);\n          setReturnSeq(result.seq);\n        } catch (err) {\n          console.log(\"error filtering\", err);\n        }\n      }\n    })();\n  }, [selectedSeqQualifier, open]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setSeqLabel([]);\n      setSelectedSeqQualifier(\"Feature\");\n      setReturnSeq(\"\");\n    }\n  }, [open]);\n\n  const SeqVizComponent = () => {\n    if (selectedSeqQualifier === \"Feature\") {\n      return (\n        <SeqViz\n          name=\"J23100\"\n          seq={returnSeq}\n          annotations={annotationsSeqSet}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    } else {\n      return (\n        <SeqViz\n          name=\"item\"\n          seq={returnSeq}\n          annotations={annotationsSeqSet}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        fullScreen\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <AppBar className={classes.appBar} color=\"secondary\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Current Assembly Sequence\n            </Typography>\n            <Typography variant=\"h6\" className={classes.title}>\n              Current Annotation: {selectedSeqQualifier}\n            </Typography>\n            <div>\n              <Autocomplete\n                color=\"white\"\n                id=\"seq-qualifiers\"\n                options={seqLabel ? seqLabel : [\"Feauture\"]}\n                getOptionLabel={(option) => option}\n                value={selectedSeqQualifier}\n                onChange={(event, newValue) => {\n                  if (newValue !== null) {\n                    setSelectedSeqQualifier(newValue);\n                  }\n                }}\n                style={{\n                  width: 400,\n                  background: \"white\",\n                  borderRadius: \"5px\",\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Search Qualifiers to change Annotation...\"\n                    variant=\"filled\"\n                  />\n                )}\n              />\n            </div>\n          </Toolbar>\n        </AppBar>\n        <DialogContent>\n          <div className={classes.SeqVizDiv}>\n            <SeqVizComponent />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custominput.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/fasta.tsx",["195"],"import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\nimport { v4 as uuid } from \"uuid\";\n\nimport UploadIMG from \"./uploadIMG\";\nimport { Typography } from \"@material-ui/core\";\nimport { ApiEndpoint } from \"../../../../../ApiConnection\";\nimport { Part } from \"../../../../../interfaces/Part\";\n\ninterface Props {\n  multiplePartLinkers: boolean;\n  setUploadedFile: React.Dispatch<React.SetStateAction<Part | undefined>>;\n  setCatchError: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const Fasta: React.FC<Props> = ({\n  multiplePartLinkers,\n  setUploadedFile,\n  setCatchError,\n}) => {\n  const { promiseInProgress } = usePromiseTracker();\n\n  async function ValidateFileUpload(\n    dataString: string,\n    filename: string,\n    checked: boolean\n  ) {\n    console.log(dataString);\n    if (checked) {\n      const response = await fetch(\n        ApiEndpoint + \"fileupload/multiple?type=fasta\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(dataString),\n        }\n      );\n      const result = await response.json();\n      if (result.partsarray) {\n        for (let i = 0; i < result.partsarray.length; i++) {\n          setUploadedFile({\n            id: uuid(),\n            seq: result.partsarray[i].seq,\n            label: result.partsarray[i].label,\n            collection: \"\",\n            type: \"fasta\",\n            base64: dataString,\n            multiple: true,\n            index: i,\n            binaryString: result.partsarray[i].binaryString,\n          });\n        }\n        setCatchError(\"\");\n      } else {\n        setCatchError(result.error);\n      }\n    } else {\n      const response = await fetch(\n        ApiEndpoint + \"fileupload/singular?type=fasta\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(dataString),\n        }\n      );\n      const result = await response.json();\n      if (result.seq) {\n        setUploadedFile({\n          id: uuid(),\n          seq: result.seq,\n          label: filename,\n          collection: \"\",\n          type: \"fasta\",\n          base64: dataString,\n          multiple: false,\n          index: undefined,\n        });\n        setCatchError(\"\");\n      } else {\n        setCatchError(result.error);\n      }\n    }\n  }\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file: any) => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = () => {\n          const binaryStr = reader.result;\n          if (binaryStr !== null && typeof binaryStr !== \"string\") {\n            const dataString = JSON.stringify(\n              Array.from(new Uint8Array(binaryStr))\n            );\n            const b64string = btoa(dataString);\n            trackPromise(\n              ValidateFileUpload(b64string, file.path, multiplePartLinkers)\n            );\n          }\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [multiplePartLinkers]\n  );\n\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  const { ref, ...rootProps } = getRootProps();\n\n  return (\n    <>\n      <RootRef rootRef={ref}>\n        <Paper {...rootProps} variant=\"outlined\">\n          <input {...getInputProps()} />\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={1}\n          >\n            <Grid item>\n              <UploadIMG />\n            </Grid>\n            <Grid item>\n              <Typography>\n                Drag and drop some files here, or click to select files\n              </Typography>\n            </Grid>\n          </Grid>\n        </Paper>\n      </RootRef>\n      {promiseInProgress ? (\n        <div style={{ padding: \"10px\" }}>\n          <Typography color=\"textSecondary\">Loading...</Typography>\n          <LinearProgress />\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/customShop.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/MultipleCheck.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/genbank.tsx",["196"],"import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\nimport { v4 as uuid } from \"uuid\";\nimport UploadIMG from \"./uploadIMG\";\nimport { Typography } from \"@material-ui/core\";\nimport { ApiEndpoint } from \"../../../../../ApiConnection\";\nimport { Part } from \"../../../../../interfaces/Part\";\n\ninterface Props {\n  multiplePartLinkers: boolean;\n  setUploadedFile: React.Dispatch<React.SetStateAction<Part | undefined>>;\n  setCatchError: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const Genbank: React.FC<Props> = ({\n  multiplePartLinkers,\n  setUploadedFile,\n  setCatchError,\n}) => {\n  const { promiseInProgress } = usePromiseTracker();\n\n  async function ValidateFileUpload(\n    dataString: string,\n    filename: string,\n    checked: boolean,\n    binary: any\n  ) {\n    console.log(dataString);\n    if (checked) {\n      console.log(\"ran\", checked);\n      const response = await fetch(\n        ApiEndpoint + \"fileupload/multiple?type=genbank\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(dataString),\n        }\n      );\n      const result = await response.json();\n      console.log(result);\n      if (result.partsarray) {\n        for (let i = 0; i < result.partsarray.length; i++) {\n          setUploadedFile({\n            id: uuid(),\n            seq: result.partsarray[i].seq,\n            label: result.partsarray[i].label,\n            collection: \"\",\n            type: \"genbank\",\n            base64: dataString,\n            multiple: true,\n            index: i,\n            binaryString: binary,\n          });\n        }\n        setCatchError(\"\");\n      } else {\n        setCatchError(result.error);\n      }\n    } else {\n      const response = await fetch(\n        ApiEndpoint + \"fileupload/singular?type=genbank\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(dataString),\n        }\n      );\n      const result = await response.json();\n      if (result.seq) {\n        setUploadedFile({\n          id: uuid(),\n          seq: result.seq,\n          label: filename,\n          collection: \"\",\n          type: \"genbank\",\n          base64: dataString,\n          multiple: false,\n          index: undefined,\n          binaryString: binary,\n        });\n        setCatchError(\"\");\n      } else {\n        setCatchError(result.error);\n      }\n    }\n  }\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file: any) => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = () => {\n          const binaryStr = reader.result;\n          if (binaryStr !== null && typeof binaryStr !== \"string\") {\n            const uint8 = new Uint8Array(binaryStr);\n            const dataString = JSON.stringify(Array.from(uint8));\n            const b64string = btoa(dataString);\n            console.log(\"data\", dataString);\n            trackPromise(\n              ValidateFileUpload(\n                b64string,\n                file.path,\n                multiplePartLinkers,\n                file\n              )\n            );\n          }\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [multiplePartLinkers]\n  );\n\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  const { ref, ...rootProps } = getRootProps();\n\n  return (\n    <>\n      <RootRef rootRef={ref}>\n        <Paper {...rootProps} variant=\"outlined\">\n          <input {...getInputProps()} />\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={1}\n          >\n            <Grid item>\n              <UploadIMG />\n            </Grid>\n            <Grid item>\n              <Typography>\n                Drag and drop some files here, or click to select files,\n              </Typography>\n            </Grid>\n          </Grid>\n        </Paper>\n      </RootRef>\n      {promiseInProgress ? (\n        <div style={{ padding: \"10px\" }}>\n          <Typography color=\"textSecondary\">Loading...</Typography>\n          <LinearProgress />\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/SBOL.tsx",["197"],"import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport UploadIMG from \"./uploadIMG\";\nimport { Typography } from \"@material-ui/core\";\nimport { ApiEndpoint } from \"../../../../../ApiConnection\";\nimport { Part } from \"../../../../../interfaces/Part\";\nimport { v4 as uuid } from \"uuid\";\n\ninterface Props {\n  setUploadedFile: React.Dispatch<React.SetStateAction<Part | undefined>>;\n  setCatchError: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const SBOL: React.FC<Props> = ({ setUploadedFile, setCatchError }) => {\n  async function ValidateFileUpload(dataString: string, filename: string) {\n    const response = await fetch(\n      ApiEndpoint +\n        \"fileupload/singular?file=\" +\n        JSON.stringify(dataString) +\n        \"&type=SBOL\"\n    );\n    const result = await response.json();\n    if (result.seq) {\n      setUploadedFile({\n        id: uuid(),\n        seq: result.seq,\n        label: filename,\n        collection: \"\",\n        type: \"SBOL\",\n        base64: dataString,\n      });\n      setCatchError(\"\");\n    } else {\n      setCatchError(result.error);\n    }\n  }\n\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: any) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        const binaryStr = reader.result;\n        if (binaryStr !== null && typeof binaryStr !== \"string\") {\n          const dataString = JSON.stringify(\n            Array.from(new Uint8Array(binaryStr))\n          );\n          const b64string = btoa(dataString);\n          ValidateFileUpload(b64string, file.path);\n        }\n        reader.readAsArrayBuffer(file);\n      };\n    });\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  const { ref, ...rootProps } = getRootProps();\n\n  return (\n    <RootRef rootRef={ref}>\n      <Paper {...rootProps} variant=\"outlined\">\n        <input {...getInputProps()} />\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item>\n            <UploadIMG />\n          </Grid>\n          <Grid item>\n            <Typography>\n              Drag and drop some files here, or click to select files\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </RootRef>\n  );\n};\n","/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/export.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/UniqueParts.Components/UniqueParts.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/UniqueAssemblies.Components/UniqueAssemblies.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/CSV.Components/csvcard.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/designer/export/JSON.Components/JSONCard.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/home/hometext.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/home/homeimg.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/home/basicsynbio.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/components/navbar/navbar.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/Home.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/Designer.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/About.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/AboutPapers.tsx",[],"/Users/benedictcarling/Documents/programming/LBF/basicsynbio_frontend/src/pages/AboutImages.tsx",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"198","replacedBy":"202"},{"ruleId":"200","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":100,"column":6,"nodeType":"206","endLine":100,"endColumn":15,"suggestions":"207"},{"ruleId":"204","severity":1,"message":"205","line":106,"column":6,"nodeType":"206","endLine":106,"endColumn":12,"suggestions":"208"},{"ruleId":"204","severity":1,"message":"209","line":70,"column":6,"nodeType":"206","endLine":70,"endColumn":35,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":14,"column":8,"nodeType":"213","messageId":"214","endLine":14,"endColumn":18},{"ruleId":"204","severity":1,"message":"215","line":82,"column":6,"nodeType":"206","endLine":82,"endColumn":12,"suggestions":"216"},{"ruleId":"204","severity":1,"message":"217","line":138,"column":6,"nodeType":"206","endLine":138,"endColumn":25,"suggestions":"218"},{"ruleId":"211","severity":1,"message":"219","line":61,"column":7,"nodeType":"213","messageId":"214","endLine":61,"endColumn":13},{"ruleId":"204","severity":1,"message":"220","line":63,"column":6,"nodeType":"206","endLine":63,"endColumn":12,"suggestions":"221"},{"ruleId":"211","severity":1,"message":"222","line":7,"column":8,"nodeType":"213","messageId":"214","endLine":7,"endColumn":25},{"ruleId":"211","severity":1,"message":"223","line":57,"column":10,"nodeType":"213","messageId":"214","endLine":57,"endColumn":26},{"ruleId":"211","severity":1,"message":"224","line":57,"column":28,"nodeType":"213","messageId":"214","endLine":57,"endColumn":47},{"ruleId":"211","severity":1,"message":"225","line":58,"column":10,"nodeType":"213","messageId":"214","endLine":58,"endColumn":29},{"ruleId":"211","severity":1,"message":"226","line":58,"column":31,"nodeType":"213","messageId":"214","endLine":58,"endColumn":53},{"ruleId":"204","severity":1,"message":"227","line":83,"column":6,"nodeType":"206","endLine":83,"endColumn":12,"suggestions":"228"},{"ruleId":"204","severity":1,"message":"229","line":141,"column":6,"nodeType":"206","endLine":141,"endColumn":34,"suggestions":"230"},{"ruleId":"204","severity":1,"message":"231","line":116,"column":5,"nodeType":"206","endLine":116,"endColumn":26,"suggestions":"232"},{"ruleId":"204","severity":1,"message":"231","line":124,"column":5,"nodeType":"206","endLine":124,"endColumn":26,"suggestions":"233"},{"ruleId":"204","severity":1,"message":"231","line":59,"column":6,"nodeType":"206","endLine":59,"endColumn":8,"suggestions":"234"},"no-native-reassign",["235"],"no-negated-in-lhs",["236"],["235"],["236"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'setCollections'. Either include it or remove the dependency array. If 'setCollections' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["237"],["238"],"React Hook React.useEffect has a missing dependency: 'setPartOptions'. Either include it or remove the dependency array. If 'setPartOptions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["239"],"@typescript-eslint/no-unused-vars","'SearchIcon' is defined but never used.","Identifier","unusedVar","React Hook React.useEffect has a missing dependency: 'item'. Either include it or remove the dependency array.",["240"],"React Hook React.useEffect has missing dependencies: 'item' and 'process'. Either include them or remove the dependency array.",["241"],"'active' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'setValidated' and 'shoppingBagItems'. Either include them or remove the dependency array. If 'setValidated' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["242"],"'DialogContentText' is defined but never used.","'assemblySequence' is assigned a value but never used.","'setAssemblySequence' is assigned a value but never used.","'assemblySequenceErr' is assigned a value but never used.","'setAssemblySequenceErr' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'shoppingBagItems'. Either include it or remove the dependency array.",["243"],"React Hook React.useEffect has missing dependencies: 'process' and 'shoppingBagItems'. Either include them or remove the dependency array.",["244"],"React Hook useCallback has a missing dependency: 'ValidateFileUpload'. Either include it or remove the dependency array.",["245"],["246"],["247"],"no-global-assign","no-unsafe-negation",{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"264","fix":"266"},{"desc":"267","fix":"268"},"Update the dependencies array to be: [loading, setCollections]",{"range":"269","text":"270"},"Update the dependencies array to be: [open, setCollections]",{"range":"271","text":"272"},"Update the dependencies array to be: [loading, clickedCollections, setPartOptions]",{"range":"273","text":"274"},"Update the dependencies array to be: [item, open]",{"range":"275","text":"276"},"Update the dependencies array to be: [item, process, selectedQualifier]",{"range":"277","text":"278"},"Update the dependencies array to be: [open, setValidated, shoppingBagItems]",{"range":"279","text":"280"},"Update the dependencies array to be: [open, shoppingBagItems]",{"range":"281","text":"282"},"Update the dependencies array to be: [selectedSeqQualifier, open, shoppingBagItems, process]",{"range":"283","text":"284"},"Update the dependencies array to be: [ValidateFileUpload, multiplePartLinkers]",{"range":"285","text":"286"},{"range":"287","text":"286"},"Update the dependencies array to be: [ValidateFileUpload]",{"range":"288","text":"289"},[2502,2511],"[loading, setCollections]",[2595,2601],"[open, setCollections]",[2148,2177],"[loading, clickedCollections, setPartOptions]",[2668,2674],"[item, open]",[4054,4073],"[item, process, selectedQualifier]",[1957,1963],"[open, setValidated, shoppingBagItems]",[2730,2736],"[open, shoppingBagItems]",[4189,4217],"[selectedSeqQualifier, open, shoppingBagItems, process]",[3465,3486],"[ValidateFileUpload, multiplePartLinkers]",[3694,3715],[1948,1950],"[ValidateFileUpload]"]