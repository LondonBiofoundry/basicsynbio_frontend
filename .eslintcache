[{"/Users/benedictcarling/basicsynbio_frontend/src/index.tsx":"1","/Users/benedictcarling/basicsynbio_frontend/src/reportWebVitals.ts":"2","/Users/benedictcarling/basicsynbio_frontend/src/app/store.ts":"3","/Users/benedictcarling/basicsynbio_frontend/src/App.tsx":"4","/Users/benedictcarling/basicsynbio_frontend/src/pages/BasicBuild.jsx":"5","/Users/benedictcarling/basicsynbio_frontend/src/ContextInitialisation.ts":"6","/Users/benedictcarling/basicsynbio_frontend/src/features/collections/collectionSlice.ts":"7","/Users/benedictcarling/basicsynbio_frontend/src/pages/Home.tsx":"8","/Users/benedictcarling/basicsynbio_frontend/src/pages/About.tsx":"9","/Users/benedictcarling/basicsynbio_frontend/src/pages/Designer.tsx":"10","/Users/benedictcarling/basicsynbio_frontend/src/components/navbar/navbar.tsx":"11","/Users/benedictcarling/basicsynbio_frontend/src/features/collections/collectionAPI.ts":"12","/Users/benedictcarling/basicsynbio_frontend/src/pages/AboutImages.tsx":"13","/Users/benedictcarling/basicsynbio_frontend/src/pages/AboutPapers.tsx":"14","/Users/benedictcarling/basicsynbio_frontend/src/components/home/hometext.tsx":"15","/Users/benedictcarling/basicsynbio_frontend/src/components/home/homeimg.tsx":"16","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/export.tsx":"17","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinput.tsx":"18","/Users/benedictcarling/basicsynbio_frontend/src/components/home/basicsynbio.tsx":"19","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardinput.tsx":"20","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/snackbar.tsx":"21","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/viewbuild.tsx":"22","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/visualiseAssembly.tsx":"23","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/validateassembly.tsx":"24","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.tsx":"25","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custominput.tsx":"26","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/successlottly.tsx":"27","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/faillottly.tsx":"28","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/MultipleCheck.tsx":"29","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/addiseq.tsx":"30","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/customShop.tsx":"31","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/genbank.tsx":"32","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/SBOL.tsx":"33","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/uploadIMG.tsx":"34","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardCopyable.tsx":"35","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/shoppingbag.tsx":"36","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/successLotty.tsx":"37","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/bagitemmodal.tsx":"38","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/combinatorialPopup.tsx":"39","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardShop.tsx":"40","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/searchPart.tsx":"41","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/seachCollection.tsx":"42","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/PDF.Components/pdf.tsx":"43","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/ECHO.Components/echo.tsx":"44","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/UniqueAssemblies.Components/UniqueAssemblies.tsx":"45","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/UniqueParts.Components/UniqueParts.tsx":"46","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/JSON.Components/JSONCard.tsx":"47","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/CSV.Components/csvcard.tsx":"48","/Users/benedictcarling/basicsynbio_frontend/src/Api.ts":"49","/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/index.ts":"50","/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/configuration.ts":"51","/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/api.ts":"52","/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/base.ts":"53","/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/common.ts":"54","/Users/benedictcarling/basicsynbio_frontend/src/utils/getFilesFromParts.ts":"55"},{"size":579,"mtime":1636912416765,"results":"56","hashOfConfig":"57"},{"size":425,"mtime":1636912416767,"results":"58","hashOfConfig":"57"},{"size":626,"mtime":1636912416761,"results":"59","hashOfConfig":"57"},{"size":1608,"mtime":1636912416750,"results":"60","hashOfConfig":"57"},{"size":16043,"mtime":1636912416766,"results":"61","hashOfConfig":"57"},{"size":1214,"mtime":1638108629449,"results":"62","hashOfConfig":"57"},{"size":1342,"mtime":1636912416762,"results":"63","hashOfConfig":"57"},{"size":847,"mtime":1636912416766,"results":"64","hashOfConfig":"57"},{"size":3438,"mtime":1636912416766,"results":"65","hashOfConfig":"57"},{"size":3416,"mtime":1638105635517,"results":"66","hashOfConfig":"57"},{"size":2274,"mtime":1636912416761,"results":"67","hashOfConfig":"57"},{"size":341,"mtime":1638093013501,"results":"68","hashOfConfig":"57"},{"size":3398,"mtime":1636912416766,"results":"69","hashOfConfig":"57"},{"size":2239,"mtime":1636912416766,"results":"70","hashOfConfig":"57"},{"size":1545,"mtime":1636912416760,"results":"71","hashOfConfig":"57"},{"size":1017,"mtime":1636912416760,"results":"72","hashOfConfig":"57"},{"size":1343,"mtime":1638097059756,"results":"73","hashOfConfig":"57"},{"size":12742,"mtime":1638112748039,"results":"74","hashOfConfig":"57"},{"size":10875,"mtime":1636912416760,"results":"75","hashOfConfig":"57"},{"size":3140,"mtime":1636912416756,"results":"76","hashOfConfig":"57"},{"size":832,"mtime":1636912416758,"results":"77","hashOfConfig":"57"},{"size":6251,"mtime":1638105594733,"results":"78","hashOfConfig":"57"},{"size":9537,"mtime":1638105619814,"results":"79","hashOfConfig":"57"},{"size":8482,"mtime":1638112364843,"results":"80","hashOfConfig":"57"},{"size":3807,"mtime":1638105415878,"results":"81","hashOfConfig":"57"},{"size":4148,"mtime":1638110067975,"results":"82","hashOfConfig":"57"},{"size":861,"mtime":1636912416759,"results":"83","hashOfConfig":"57"},{"size":860,"mtime":1636912416758,"results":"84","hashOfConfig":"57"},{"size":793,"mtime":1636912416753,"results":"85","hashOfConfig":"57"},{"size":683,"mtime":1636912416753,"results":"86","hashOfConfig":"57"},{"size":509,"mtime":1638097252400,"results":"87","hashOfConfig":"57"},{"size":4491,"mtime":1638474755042,"results":"88","hashOfConfig":"57"},{"size":2709,"mtime":1638104994594,"results":"89","hashOfConfig":"57"},{"size":595,"mtime":1636912416754,"results":"90","hashOfConfig":"57"},{"size":3289,"mtime":1638105424495,"results":"91","hashOfConfig":"57"},{"size":7541,"mtime":1638105383834,"results":"92","hashOfConfig":"57"},{"size":592,"mtime":1636912416755,"results":"93","hashOfConfig":"57"},{"size":9460,"mtime":1638105046678,"results":"94","hashOfConfig":"57"},{"size":5541,"mtime":1638105254542,"results":"95","hashOfConfig":"57"},{"size":520,"mtime":1636912416757,"results":"96","hashOfConfig":"57"},{"size":3048,"mtime":1638474781254,"results":"97","hashOfConfig":"57"},{"size":5268,"mtime":1638474818584,"results":"98","hashOfConfig":"57"},{"size":1989,"mtime":1638213796091,"results":"99","hashOfConfig":"57"},{"size":1915,"mtime":1638474691612,"results":"100","hashOfConfig":"57"},{"size":2071,"mtime":1638474738624,"results":"101","hashOfConfig":"57"},{"size":2023,"mtime":1638474743996,"results":"102","hashOfConfig":"57"},{"size":2437,"mtime":1638474697705,"results":"103","hashOfConfig":"57"},{"size":1850,"mtime":1638474704946,"results":"104","hashOfConfig":"57"},{"size":591,"mtime":1638211870562,"results":"105","hashOfConfig":"57"},{"size":776,"mtime":1638473263634,"results":"106","hashOfConfig":"57"},{"size":3545,"mtime":1638473263665,"results":"107","hashOfConfig":"57"},{"size":80637,"mtime":1638473263663,"results":"108","hashOfConfig":"57"},{"size":1868,"mtime":1638473263637,"results":"109","hashOfConfig":"57"},{"size":4526,"mtime":1638473263640,"results":"110","hashOfConfig":"57"},{"size":1285,"mtime":1638113777636,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"1d5zv59",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"114"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"114"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"114"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"114"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"/Users/benedictcarling/basicsynbio_frontend/src/index.tsx",[],["235","236"],"/Users/benedictcarling/basicsynbio_frontend/src/reportWebVitals.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/app/store.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/App.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/pages/BasicBuild.jsx",["237"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst space4 = \"\\xa0\\xa0\\xa0\\xa0\";\nconst space8 = \"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\";\nconst space12 = \"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\";\nconst space16 =\n  \"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\";\n\nconst basiclinker = `\"<class 'basicsynbio.main.BasicLinker'>\"`;\nconst utrlinker = `\"<class 'basicsynbio.main.BasicUTRRBSLinker'>\"`;\n\nconst components = {\n  code({ node, inline, className, children, ...props }) {\n    const match = /language-(\\w+)/.exec(className || \"\");\n    return !inline && match ? (\n      <SyntaxHighlighter\n        style={dark}\n        language={match[1]}\n        PreTag=\"div\"\n        children={String(children).replace(/\\n$/, \"\")}\n        {...props}\n      />\n    ) : (\n      <code className={className} {...props} />\n    );\n  },\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    alignItems: \"left\",\n    textAlign: \"left\",\n    alignSelf: \"stretch\",\n    padding: \"50px\",\n  },\n}));\n\nexport default function BasicBuild() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n        spacing={3}\n      >\n        <Grid item xs={12}>\n          <Typography variant=\"h4\">Type Definitions</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\">\n            Instruction and ref specification use the following common types.\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Primitive Types</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Type</TableCell>\n                  <TableCell> Definition </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow key={\"1\"}>\n                  <TableCell>Float</TableCell>\n                  <TableCell>a floating point numeric value</TableCell>\n                </TableRow>\n\n                <TableRow key={\"2\"}>\n                  <TableCell>Int</TableCell>\n                  <TableCell>an integer numeric value</TableCell>\n                </TableRow>\n                <TableRow key={\"3\"}>\n                  <TableCell>String</TableCell>\n                  <TableCell>\n                    any sequence of utf-encoded characters bounded with \"\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Defined Types</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Type</TableCell>\n                  <TableCell> Example </TableCell>\n                  <TableCell> Definition </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow key={\"1\"}>\n                  <TableCell>DNA-String</TableCell>\n                  <TableCell>\n                    \"TACGCATGACTCGTACGTACGATCGATCGATCGATCGTACTGCATC\"\n                  </TableCell>\n                  <TableCell>\n                    any sequence of utf-encoded A,C,T or G characters bounded\n                    with \"\n                  </TableCell>\n                </TableRow>\n                <TableRow key={\"2\"}>\n                  <TableCell>Unique-Part-ID</TableCell>\n                  <TableCell>UP0</TableCell>\n                  <TableCell>UP + A Non-Negative Int (0,1,2...)</TableCell>\n                </TableRow>\n                <TableRow key={\"3\"}>\n                  <TableCell>Unique-Linker-ID</TableCell>\n                  <TableCell>UL0</TableCell>\n                  <TableCell>UL + A Non-Negative Int (0,1,2...)</TableCell>\n                </TableRow>\n                <TableRow key={\"4\"}>\n                  <TableCell>Clip-Reaction-ID</TableCell>\n                  <TableCell>CR0</TableCell>\n                  <TableCell>CR + A Non-Negative Int (0,1,2...)</TableCell>\n                </TableRow>\n                <TableRow key={\"5\"}>\n                  <TableCell>Assembly-ID</TableCell>\n                  <TableCell>A0</TableCell>\n                  <TableCell>A + A Non-Negative Int (0,1,2...)</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">BasicBuild Object Types</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper variant=\"outlined\" padding=\"10px\">\n            <div style={{ padding: \"10px\" }}>\n              {\"{\"}\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space4}\"unique_parts\"</span>\n                : {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#1b7fff\" }}>{space8}Unique-Part-ID</span>\n                : {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"sequence\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>DNA-String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"name\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"description\"</span>\n                : <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"suggested stock concentration (ng/µL)\"\n                </span>\n                : <span style={{ color: \"#1b7fff\" }}>Float</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"stock per 30 µL clip (µL)\"\n                </span>\n                : <span style={{ color: \"#1b7fff\" }}>Int</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"clip reactions\"\n                </span>\n                :{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>\n                  Array[Clip-Reaction-ID]\n                </span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space8}\n                {\"}\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space4}\n                {\"}\"},\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space4}\"unique_linkers\"\n                </span>\n                : {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#1b7fff\" }}>\n                  {space8}Unique-Linker-ID\n                </span>\n                : {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"linker_class\"\n                </span>\n                :{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>\n                  Enum({basiclinker + \",\" + utrlinker})\n                </span>\n                ,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"sequence\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>DNA-String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"prefix_id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"suffix_id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"prefix clip reactions\"\n                </span>\n                :{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>\n                  Array[Clip-Reaction-ID]\n                </span>\n                ,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"suffix clip reactions\"\n                </span>\n                :{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>\n                  Array[Clip-Reaction-ID]\n                </span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space8}\n                {\"}\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space4}\n                {\"},\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space4}\"clips_data\"</span>:{\" \"}\n                {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#1b7fff\" }}>\n                  {space8}Clip-Reaction-ID\n                </span>\n                : {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"prefix\"</span>:{\" \"}\n                {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"key\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>Unique-Linker-ID</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"prefix_id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space12}\n                {\"}\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"part\"</span>: {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"key\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>Unique-Part-ID</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"name\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space12}\n                {\"}\"},\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"suffix\"</span>:{\" \"}\n                {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"key\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>Unique-Linker-ID</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space16}\"suffix_id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space12}\n                {\"}\"},\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"total assemblies\"\n                </span>\n                : <span style={{ color: \"#1b7fff\" }}>Int</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"assembly keys\"\n                </span>\n                : <span style={{ color: \"#1b7fff\" }}>Array[Assembly-ID]</span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space8}\n                {\"}\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space4}\n                {\"}\"},\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space4}\"assembly_data\"\n                </span>\n                : {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#1b7fff\" }}>{space8}Assembly-ID</span>:{\" \"}\n                {\"{\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>{space12}\"id\"</span>:{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>String</span>,\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                <span style={{ color: \"#dd1244\" }}>\n                  {space12}\"clip reactions\"\n                </span>\n                :{\" \"}\n                <span style={{ color: \"#1b7fff\" }}>\n                  Array[Clip-Reaction-ID]\n                </span>\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space8}\n                {\"}\"}\n              </div>\n              <div style={{ paddingTop: \"10px\" }}>\n                {space4}\n                {\"}\"}\n              </div>\n              {\"}\"}\n            </div>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">Example BasicBuild Object</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\">\n            An example BasicBuild JSON object can be found in the github\n            repository for basicsynbio:{\" \"}\n            <a href=\"https://github.com/LondonBiofoundry/basicsynbio/blob/master/json_files/test_build.json\">\n              https://github.com/LondonBiofoundry/basicsynbio/blob/master/json_files/test_build.json\n            </a>\n          </Typography>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n",["238","239"],"/Users/benedictcarling/basicsynbio_frontend/src/ContextInitialisation.ts",["240","241","242"],"import axios from \"axios\";\nimport { Collection } from \"./generated-sources\";\nimport { API } from \"./Api\";\n\nexport const getCollectionNames = async (): Promise<Collection[\"name\"][]> => {\n  const storageNames = localStorage.getItem(\"collectionNames\");\n  // if (storageNames) {\n  //   console.log(\"Retrieved collection names from local storage\");\n  //   return JSON.parse(storageNames);\n  // }\n  console.log(\"Retrieving collection names from API\");\n  const response = await API.getCollectionNamesCollectionsNamesGet();\n  const ResponseCollectionsName = response.data;\n  localStorage.setItem(\n    \"collectionNames\",\n    JSON.stringify(ResponseCollectionsName.data)\n  );\n  return ResponseCollectionsName.data;\n};\n\nexport const getCollectionData = async (): Promise<Collection[]> => {\n  const storageNames = localStorage.getItem(\"collectionData\");\n  // if (storageNames) {\n  //   console.log(\"Retrieved collection data from local storage\");\n  //   return JSON.parse(storageNames);\n  // }\n  console.log(\"Retrieving collection data from API\");\n  const response = await API.getCollectionDataCollectionsDataGet();\n  localStorage.setItem(\"collectionData\", JSON.stringify(response.data.data));\n  return response.data.data;\n};\n","/Users/benedictcarling/basicsynbio_frontend/src/features/collections/collectionSlice.ts",["243","244","245"],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"../../app/store\";\nimport { Collection } from \"../../generated-sources\";\nimport { retriveCollections } from \"./collectionAPI\";\n\nconst initialState: Collection[] = [];\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const fetchCollections = createAsyncThunk(\n  \"collections/fetchCollections\",\n  async () => {\n    const response = await retriveCollections();\n    // The value we return becomes the `fulfilled` action payload\n    return response;\n  }\n);\n\nexport const collectionsSlice = createSlice({\n  name: \"collections\",\n  initialState,\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder.addCase(fetchCollections.fulfilled, (state, action) => {\n      state.push(...action.payload);\n    });\n  },\n});\n\nexport default collectionsSlice.reducer;\n","/Users/benedictcarling/basicsynbio_frontend/src/pages/Home.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/pages/About.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/pages/Designer.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/navbar/navbar.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/features/collections/collectionAPI.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/pages/AboutImages.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/pages/AboutPapers.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/home/hometext.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/home/homeimg.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/export.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinput.tsx",["246","247","248","249","250","251","252","253","254","255"],"import { Grid } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport BuildRoundedIcon from \"@material-ui/icons/BuildRounded\";\nimport VisibilityRoundedIcon from \"@material-ui/icons/VisibilityRounded\";\nimport DoneAllRoundedIcon from \"@material-ui/icons/DoneAllRounded\";\nimport { green } from \"@material-ui/core/colors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CustomPartLinker } from \"./custominput/custominput\";\nimport { Plasmid } from \"./plasmid/plasmid\";\nimport { ViewBuild } from \"./userinputUtils/viewbuild\";\nimport { ValidateAssembly } from \"./userinputUtils/validateassembly\";\nimport { SnackbarPopups } from \"./userinputUtils/snackbar\";\nimport { VisualiseAssembly } from \"./userinputUtils/visualiseAssembly\";\n\nimport \"./styles.css\";\nimport { StandardInput } from \"./standardinput/standardinput\";\nimport { Popups } from \"../../../interfaces/Popups\";\nimport {\n  BasicPart,\n  BasicAssembly,\n  BasicPartType,\n} from \"../../../generated-sources\";\n\nconst useStyles = makeStyles((theme) => ({\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n  FAB: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    left: theme.spacing(2),\n  },\n  FABitem: {\n    marginRight: theme.spacing(1),\n  },\n  FABitemgreen: {\n    marginRight: theme.spacing(1),\n    color: theme.palette.common.white,\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[600],\n    },\n  },\n}));\n\nconst reorder = (list: BasicPart[], startIndex: number, endIndex: number) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (\n  source: any,\n  destination: any,\n  droppableSource: any,\n  droppableDestination: any\n) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, { ...item, id: uuid() });\n  return destination;\n};\n\nconst expand_first_combinatorial = (input_lists: BasicPart[][]) => {\n  const expanded_assemblies: BasicPart[][] = [];\n  input_lists.forEach((input_list) => {\n    const combinatorialFirstItem = input_list.filter(\n      (item) => item.combinatorial == true\n    )[0];\n    const combinatorialItemIndex = input_list.indexOf(combinatorialFirstItem);\n    combinatorialFirstItem.combinatorialParts?.forEach((element: any) => {\n      var smaller_list = input_list.filter(\n        (part) => part != combinatorialFirstItem\n      );\n      smaller_list.splice(combinatorialItemIndex, 0, element);\n      console.log(smaller_list);\n      expanded_assemblies.push(smaller_list);\n    });\n  });\n  return expanded_assemblies;\n};\n\nconst check_list_contains_conbinatorial = (input_lists: BasicPart[][]) => {\n  const mylist = input_lists[0].filter((item) => item.combinatorial === true);\n  if (mylist.length >= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\ninterface Props {\n  currentBuild: BasicAssembly[];\n  setCurrentBuild: React.Dispatch<React.SetStateAction<BasicAssembly[]>>;\n}\n\nexport const UserInput: React.FC<Props> = ({\n  currentBuild,\n  setCurrentBuild,\n}) => {\n  const classes = useStyles();\n  //Used to add Parts to Collection Shops\n  const [value, setValue] = useState<BasicPart | undefined>();\n  const [uploadedFile, setUploadedFile] = useState<BasicPart>();\n  // Used to track Assembly Information\n  const [assemblyID, setAssemblyID] = useState<string>(\"\");\n  // Contains Information Abou the 3 shopping bags on screen\n  const [COLLECTION, setCOLLECTION] = useState<BasicPart[]>([]);\n  const [COLLECTION2, setCOLLECTION2] = useState<BasicPart[]>([]);\n  const [shoppingBagItems, setShoppingBagItems] = useState<BasicPart[]>([]);\n  //Validate Assembly Function\n  const [validated, setValidated] = useState<boolean>(false);\n  //AssemblyInputBoxed\n  const [assemblyName, setAssemblyName] = useState<string>(\"\");\n  const [assemblyDesc, setAssemblyDesc] = useState<string>(\"\");\n  //HandlePopups\n  const [openPopups, setOpenPopups] = useState<Popups>({\n    viewAssembly: false,\n    viewBuild: false,\n    validationAssembly: false,\n    pleaseValidateMessage: false,\n  });\n\n  const onDeleteStandardPart = (partlabel: BasicPart[\"label\"]) => {\n    if (partlabel !== null) {\n      let filteredArray = COLLECTION.filter((item) => item.label !== partlabel);\n      setCOLLECTION(filteredArray);\n    }\n  };\n\n  const onDeleteCustomPart = (partlabel: BasicPart[\"label\"]) => {\n    if (partlabel !== null) {\n      let filteredArray = COLLECTION2.filter(\n        (item) => item.label !== partlabel\n      );\n      setCOLLECTION2(filteredArray);\n    }\n  };\n\n  useEffect(() => {\n    if (value?.label !== undefined) {\n      setCOLLECTION((C: BasicPart[]) => [...C, value]);\n    }\n  }, [setValue, value]);\n\n  useEffect(() => {\n    if (uploadedFile?.label !== undefined) {\n      setCOLLECTION2((C) => [...C, uploadedFile]);\n    }\n  }, [uploadedFile]);\n\n  const onShopItemDelete = (itemid: BasicPart[\"id\"]) => {\n    let filteredArray = shoppingBagItems.filter((item) => item.id !== itemid);\n    setShoppingBagItems(filteredArray);\n    setValidated(false);\n  };\n\n  const onAddToBuild = () => {\n    if (\n      shoppingBagItems.filter((item) => item.combinatorial == true).length === 0\n    ) {\n      const currentAssembly: BasicAssembly = {\n        id: uuid(),\n        parts: shoppingBagItems,\n        name: assemblyName,\n        description: assemblyDesc,\n      };\n      setCurrentBuild((C) => [...C, currentAssembly]);\n      setAssemblyDesc(\"\");\n      setAssemblyName(\"\");\n      setShoppingBagItems([]);\n      setValidated(false);\n    }\n    if (\n      shoppingBagItems.filter((item) => item.combinatorial == true).length === 1\n    ) {\n      const combinatorialItem = shoppingBagItems.filter(\n        (item) => item.combinatorial == true\n      )[0];\n      const combinatorialItemIndex = shoppingBagItems.indexOf(\n        combinatorialItem\n      );\n      console.log(combinatorialItemIndex);\n      const new_assemblies: BasicPart[][] = [];\n      const old_shopping: BasicPart[] = shoppingBagItems;\n      shoppingBagItems.map((item, index) => {\n        if (item.combinatorial) {\n          item.combinatorialParts?.forEach((element: any) => {\n            var smaller_list = shoppingBagItems.filter((part) => part != item);\n            smaller_list.splice(index, 0, element);\n            console.log(smaller_list);\n            new_assemblies.push(smaller_list);\n          });\n        }\n      });\n      new_assemblies.forEach((element) => {\n        const currentAssembly: BasicAssembly = {\n          id: uuid(),\n          parts: element,\n          name: assemblyName,\n          description: assemblyDesc,\n        };\n        setCurrentBuild((C) => [...C, currentAssembly]);\n      });\n      setAssemblyDesc(\"\");\n      setAssemblyName(\"\");\n      setShoppingBagItems([]);\n      setValidated(false);\n    }\n    if (\n      shoppingBagItems.filter((item) => item.combinatorial == true).length > 1\n    ) {\n      var expanded_result: BasicPart[][] = expand_first_combinatorial([\n        shoppingBagItems,\n      ]);\n      while (check_list_contains_conbinatorial(expanded_result)) {\n        expanded_result = expand_first_combinatorial(expanded_result);\n      }\n      expanded_result.forEach((element) => {\n        const currentAssembly: BasicAssembly = {\n          id: uuid(),\n          parts: element,\n          name: assemblyName,\n          description: assemblyDesc,\n        };\n        setCurrentBuild((C) => [...C, currentAssembly]);\n      });\n      setAssemblyDesc(\"\");\n      setAssemblyName(\"\");\n      setShoppingBagItems([]);\n      setValidated(false);\n    }\n  };\n\n  const onDragEnd = React.useCallback(\n    (result) => {\n      const { source, destination } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      switch (source.droppableId) {\n        case destination.droppableId:\n          setShoppingBagItems((state) =>\n            reorder(state, source.index, destination.index)\n          );\n          setValidated(false);\n          break;\n        case \"SHOP\":\n          setShoppingBagItems((state) =>\n            copy(COLLECTION, state, source, destination)\n          );\n          setValidated(false);\n          break;\n        case \"SHOP2\":\n          setShoppingBagItems((state) =>\n            copy(COLLECTION2, state, source, destination)\n          );\n          setValidated(false);\n          break;\n        default:\n          break;\n      }\n    },\n    [setShoppingBagItems, COLLECTION, COLLECTION2]\n  );\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div style={{ padding: 20 }}>\n        <Grid container direction=\"row\" alignItems=\"stretch\" spacing={3}>\n          <Grid item xs={12} md={6}>\n            <StandardInput\n              standardCollection={COLLECTION}\n              value={value}\n              onChangeValue={setValue}\n              onDeleteStandardPart={onDeleteStandardPart}\n            />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <CustomPartLinker\n              items={COLLECTION2}\n              setUploadedFile={setUploadedFile}\n              onDeleteCustomPart={onDeleteCustomPart}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Plasmid\n              COLLECTION={COLLECTION}\n              COLLECTION2={COLLECTION2}\n              assemblyName={assemblyName}\n              assemblyDesc={assemblyDesc}\n              setAssemblyDesc={setAssemblyDesc}\n              setAssemblyName={setAssemblyName}\n              validated={validated}\n              assemblyID={assemblyID}\n              setAssemblyID={setAssemblyID}\n              items={shoppingBagItems}\n              onShopItemDelete={onShopItemDelete}\n            />\n          </Grid>\n        </Grid>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n          spacing={3}\n        >\n          <Grid item>\n            <div className={classes.FAB}>\n              <Fab\n                onClick={\n                  validated\n                    ? () => setOpenPopups((C) => ({ ...C, viewAssembly: true }))\n                    : () =>\n                        setOpenPopups((C) => ({\n                          ...C,\n                          pleaseValidateMessage: true,\n                        }))\n                }\n                className={classes.FABitem}\n                variant=\"extended\"\n                color=\"primary\"\n                aria-label=\"visualise\"\n              >\n                <VisibilityRoundedIcon className={classes.extendedIcon} />\n                Visualise\n              </Fab>\n              <Fab\n                onClick={() =>\n                  setOpenPopups((C) => ({ ...C, validationAssembly: true }))\n                }\n                className={classes.FABitemgreen}\n                variant=\"extended\"\n                aria-label=\"Validate\"\n              >\n                <DoneAllRoundedIcon className={classes.extendedIcon} />\n                Validate\n              </Fab>\n              <Fab\n                onClick={() =>\n                  setOpenPopups((C) => ({ ...C, viewBuild: true }))\n                }\n                className={classes.FABitem}\n                variant=\"extended\"\n                color=\"secondary\"\n              >\n                <BuildRoundedIcon className={classes.extendedIcon} />\n                View Current Build\n              </Fab>\n              <ViewBuild\n                rows={currentBuild}\n                openPopups={openPopups}\n                setOpenPopups={setOpenPopups}\n              />\n              <Fab\n                onClick={\n                  validated\n                    ? onAddToBuild\n                    : () =>\n                        setOpenPopups((C) => ({\n                          ...C,\n                          pleaseValidateMessage: true,\n                        }))\n                }\n                className={classes.FABitem}\n                variant=\"extended\"\n                color=\"secondary\"\n                aria-label=\"add\"\n              >\n                <AddIcon className={classes.extendedIcon} />\n                Add to Build\n              </Fab>\n            </div>\n          </Grid>\n        </Grid>\n        <ValidateAssembly\n          setValidated={setValidated}\n          shoppingBagItems={shoppingBagItems}\n          openPopups={openPopups}\n          setOpenPopups={setOpenPopups}\n        />\n        <SnackbarPopups openPopups={openPopups} setOpenPopups={setOpenPopups} />\n        <VisualiseAssembly\n          shoppingBagItems={shoppingBagItems}\n          openPopups={openPopups}\n          setOpenPopups={setOpenPopups}\n        />\n      </div>\n    </DragDropContext>\n  );\n};\n","/Users/benedictcarling/basicsynbio_frontend/src/components/home/basicsynbio.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardinput.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/snackbar.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/viewbuild.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/visualiseAssembly.tsx",["256","257","258"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n// @ts-ignore\nimport { SeqViz } from \"seqviz\";\nimport { ApiEndpoint } from \"../../../../Api\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport { Popups } from \"../../../../interfaces/Popups\";\nimport { BasicPart } from \"../../../../generated-sources\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n  SeqVizDiv: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  switch: {\n    paddingLeft: \"10%\",\n  },\n  toggle: {\n    background: \"white\",\n    borderRadius: \"5px\",\n  },\n}));\n\ninterface Props {\n  shoppingBagItems: BasicPart[];\n  openPopups: Popups;\n  setOpenPopups: React.Dispatch<React.SetStateAction<Popups>>;\n}\n\nexport const VisualiseAssembly: React.FC<Props> = ({\n  shoppingBagItems,\n  openPopups,\n  setOpenPopups,\n}) => {\n  const classes = useStyles();\n  const [DnaViewerString, setDnaViewerString] = useState<string>(\"\");\n  const [viewType, setViewType] = useState<\"DnaFeatureViewer\" | \"Seqviz\">(\n    \"Seqviz\"\n  );\n  const [seqLabel, setSeqLabel] = useState([\"Feature\"]);\n  const [selectedSeqQualifier, setSelectedSeqQualifier] = useState(\"Feature\");\n  const [returnSeq, setReturnSeq] = useState(\"\");\n  const [annotationsSeqSet, setAnnotationsSeqSet] = useState([]);\n  const userWidth =\n    (window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth) - 65;\n  const userHeight =\n    window.innerHeight ||\n    document.documentElement.clientHeight ||\n    document.body.clientHeight - 120;\n\n  type ViewMethod = \"DnaFeatureViewer\" | \"Seqviz\";\n  const handleViewTypeChange = (event: any, newMethod: ViewMethod) => {\n    if ([\"DnaFeatureViewer\", \"Seqviz\"].indexOf(newMethod) >= 0) {\n      if (newMethod === viewType) return;\n      else setViewType(newMethod);\n    }\n  };\n\n  //////\n  React.useEffect(() => {\n    (async () => {\n      const responselabels = await fetch(ApiEndpoint + \"viewseqlabels\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(shoppingBagItems),\n      });\n      const resultlabels = await responselabels.json();\n      if (!resultlabels.error) setSeqLabel(resultlabels);\n    })();\n    (async () => {\n      const DnaFeatureViewer = await fetch(\n        ApiEndpoint + \"dnafeatureviewer_assembly\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(shoppingBagItems),\n        }\n      );\n      const dnafeatureviewer_response = await DnaFeatureViewer.json();\n      setDnaViewerString(dnafeatureviewer_response.base64image);\n      console.log(dnafeatureviewer_response);\n    })();\n  }, [openPopups.viewAssembly]);\n\n  function random_color() {\n    const colorCodes = [\n      \"#9DEAED\", // cyan\n      \"#8FDE8C\", // green\n      \"#CFF283\", // light green\n      \"#8CDEBD\", // teal\n      \"#F0A3CE\", // pink\n      \"#F7C672\", // orange\n      \"#F07F7F\", // red\n      \"#FAA887\", // red-orange\n      \"#F099F7\", // magenta\n      \"#C59CFF\", // purple\n      \"#6B81FF\", // blue\n      \"#85A6FF\", // light blue\n    ];\n    return colorCodes[Math.floor(Math.random() * colorCodes.length)];\n  }\n\n  function process(entry: any) {\n    if (entry)\n      return {\n        name: entry.name,\n        start: entry.start,\n        end: entry.end,\n        direction: entry.direction,\n        color: random_color(),\n      };\n    else return;\n  }\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        ApiEndpoint +\n          \"assemblySeq?qualifier=\" +\n          JSON.stringify(selectedSeqQualifier),\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(shoppingBagItems),\n        }\n      );\n      const result = await response.json();\n      if (!result.err) {\n        try {\n          var filtered = result.annotated.filter(Boolean);\n          var processed = filtered.map(process);\n          setAnnotationsSeqSet(processed);\n          setReturnSeq(result.seq);\n        } catch (err) {\n          console.log(\"error filtering\", err);\n        }\n      }\n    })();\n  }, [selectedSeqQualifier, openPopups.viewAssembly]);\n\n  React.useEffect(() => {\n    if (!openPopups.viewAssembly) {\n      setSeqLabel([]);\n      setSelectedSeqQualifier(\"Feature\");\n      setReturnSeq(\"\");\n    }\n  }, [openPopups.viewAssembly]);\n\n  const SeqVizComponent = () => {\n    if (selectedSeqQualifier === \"Feature\") {\n      return (\n        <SeqViz\n          name=\"J23100\"\n          seq={returnSeq}\n          annotations={annotationsSeqSet}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    } else {\n      return (\n        <SeqViz\n          name=\"item\"\n          seq={returnSeq}\n          annotations={annotationsSeqSet}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    }\n  };\n\n  return (\n    <>\n      <Dialog\n        fullScreen\n        open={openPopups.viewAssembly}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={() => setOpenPopups((C) => ({ ...C, viewAssembly: false }))}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <AppBar className={classes.appBar} color=\"secondary\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={() =>\n                setOpenPopups((C) => ({ ...C, viewAssembly: false }))\n              }\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Current Assembly Sequence\n            </Typography>\n            {viewType === \"Seqviz\" ? (\n              <>\n                <Typography variant=\"h6\" className={classes.title}>\n                  Current Annotation: {selectedSeqQualifier}\n                </Typography>\n                <div>\n                  <Autocomplete\n                    color=\"white\"\n                    id=\"seq-qualifiers\"\n                    options={seqLabel ? seqLabel : [\"Feauture\"]}\n                    getOptionLabel={(option) => option}\n                    value={selectedSeqQualifier}\n                    onChange={(event, newValue) => {\n                      if (newValue !== null) {\n                        setSelectedSeqQualifier(newValue);\n                      }\n                    }}\n                    style={{\n                      width: 400,\n                      background: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Search Qualifiers to change Annotation...\"\n                        variant=\"filled\"\n                      />\n                    )}\n                  />\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n            <div className={classes.switch}>\n              <div className={classes.toggle}>\n                <ToggleButtonGroup\n                  color=\"primary\"\n                  value={viewType}\n                  exclusive\n                  onChange={handleViewTypeChange}\n                  aria-label=\"text alignment\"\n                >\n                  <ToggleButton value=\"Seqviz\">Seqviz</ToggleButton>\n                  <ToggleButton value=\"DnaFeatureViewer\">\n                    DnaFeatureViewer\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </div>\n            </div>\n          </Toolbar>\n        </AppBar>\n        <DialogContent>\n          {viewType === \"Seqviz\" ? (\n            <div className={classes.SeqVizDiv}>\n              <SeqVizComponent />\n            </div>\n          ) : (\n            <>\n              <img\n                width=\"100%\"\n                src={`data:image/jpeg;base64,${DnaViewerString}`}\n              />\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() =>\n              setOpenPopups((C) => ({ ...C, viewAssembly: false }))\n            }\n            color=\"primary\"\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/validateassembly.tsx",["259","260","261","262","263","264","265","266","267","268","269"],"import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport SuccessAnimation from \"./successlottly\";\nimport FailAnimation from \"./faillottly\";\nimport { API, ApiEndpoint } from \"../../../../Api\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport { Popups } from \"../../../../interfaces/Popups\";\nimport { BasicPart } from \"../../../../generated-sources\";\nimport { returnFileFromJsonParts } from \"../../../../utils/getFilesFromParts\";\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface Props {\n  setValidated: React.Dispatch<React.SetStateAction<boolean>>;\n  shoppingBagItems: BasicPart[];\n  openPopups: Popups;\n  setOpenPopups: React.Dispatch<React.SetStateAction<Popups>>;\n}\n\nexport const ValidateAssembly: React.FC<Props> = ({\n  setValidated,\n  shoppingBagItems,\n  openPopups,\n  setOpenPopups,\n}) => {\n  const [validation, setValidation] = useState(\"\");\n\n  const expand_first_combinatorial = (input_lists: BasicPart[][]) => {\n    const expanded_assemblies: BasicPart[][] = [];\n    input_lists.forEach((input_list) => {\n      const combinatorialFirstItem = input_list.filter(\n        (item) => item.combinatorial == true\n      )[0];\n      const combinatorialItemIndex = input_list.indexOf(combinatorialFirstItem);\n      combinatorialFirstItem.combinatorialParts?.forEach((element: any) => {\n        var smaller_list = input_list.filter(\n          (part) => part != combinatorialFirstItem\n        );\n        smaller_list.splice(combinatorialItemIndex, 0, element);\n        console.log(smaller_list);\n        expanded_assemblies.push(smaller_list);\n      });\n    });\n    return expanded_assemblies;\n  };\n\n  const check_list_contains_conbinatorial = (input_lists: BasicPart[][]) => {\n    const mylist = input_lists[0].filter((item) => item.combinatorial === true);\n    if (mylist.length >= 1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  React.useEffect(() => {\n    let active = true;\n    console.log(shoppingBagItems);\n    if (\n      shoppingBagItems.filter((item) => item.combinatorial == true).length === 1\n    ) {\n      console.log(\"only 1 combinatorial\");\n      const combinatorialItem = shoppingBagItems.filter(\n        (item) => item.combinatorial == true\n      )[0];\n      const combinatorialItemIndex = shoppingBagItems.indexOf(\n        combinatorialItem\n      );\n      console.log(combinatorialItemIndex);\n      const new_assemblies: BasicPart[][] = [];\n      const old_shopping: BasicPart[] = shoppingBagItems;\n      shoppingBagItems.map((item, index) => {\n        if (item.combinatorial) {\n          item.combinatorialParts?.forEach((element: any) => {\n            var smaller_list = shoppingBagItems.filter((part) => part != item);\n            smaller_list.splice(index, 0, element);\n            console.log(smaller_list);\n            new_assemblies.push(smaller_list);\n          });\n        }\n      });\n      console.log(new_assemblies);\n      const my_validation_results: Boolean[] = [];\n      const my_errors: String[] = [];\n\n      new_assemblies.forEach((element) => {\n        (async () => {\n          const response = await fetch(ApiEndpoint + \"validate\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(element),\n          });\n          const myresponse = await response.json();\n          if (String(myresponse.result) === \"success\") {\n            my_validation_results.push(true);\n          } else {\n            my_validation_results.push(false);\n            my_errors.push(\n              String(myresponse.error) +\n                \" ON COMBINATORIAL ASSEMBLY ->\" +\n                String(element.map((thing) => thing.label))\n            );\n          }\n        })().then(() => {\n          if (my_validation_results.includes(false)) {\n            setValidated(false);\n            setValidation(String(my_errors));\n            console.log(my_errors);\n          } else {\n            setValidated(true);\n            setValidation(\"success\");\n          }\n        });\n      });\n    }\n    if (\n      shoppingBagItems.filter((item) => item.combinatorial == true).length === 0\n    ) {\n      (async () => {\n        const response = await API.validateAssemblyValidatePost(\n          JSON.stringify(shoppingBagItems),\n          returnFileFromJsonParts(shoppingBagItems)\n        );\n        const responseValue = response.data;\n        if (responseValue.result) {\n          setValidation(\"success\");\n          setValidated(true);\n        } else {\n          setValidation(responseValue.message ?? \"Could not validate files\");\n          setValidated(false);\n        }\n      })();\n    }\n    if (\n      shoppingBagItems.filter((item) => item.combinatorial == true).length > 1\n    ) {\n      console.log(\"more than 1 combinatorial\");\n      //////\n      console.log(\"using_my_function\");\n      var expanded_result: BasicPart[][] = expand_first_combinatorial([\n        shoppingBagItems,\n      ]);\n      while (check_list_contains_conbinatorial(expanded_result)) {\n        expanded_result = expand_first_combinatorial(expanded_result);\n      }\n      console.log(\"final result\");\n      console.log(expanded_result);\n      const my_validation_results: Boolean[] = [];\n      const my_errors: String[] = [];\n\n      expanded_result.forEach((element) => {\n        (async () => {\n          const response = await fetch(ApiEndpoint + \"validate\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(element),\n          });\n          const myresponse = await response.json();\n          if (String(myresponse.result) === \"success\") {\n            my_validation_results.push(true);\n          } else {\n            my_validation_results.push(false);\n            my_errors.push(\n              String(myresponse.error) +\n                \" ON COMBINATORIAL ASSEMBLY ->\" +\n                String(element.map((thing) => thing.label))\n            );\n          }\n        })().then(() => {\n          if (my_validation_results.includes(false)) {\n            setValidated(false);\n            setValidation(String(my_errors));\n            console.log(my_errors);\n          } else {\n            setValidated(true);\n            setValidation(\"success\");\n          }\n        });\n      });\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [openPopups.validationAssembly]);\n\n  function FailSuccess() {\n    return validation === \"success\" ? <SuccessAnimation /> : <FailAnimation />;\n  }\n\n  return (\n    <>\n      <Dialog\n        open={openPopups.validationAssembly}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={() =>\n          setOpenPopups((C) => ({ ...C, validationAssembly: false }))\n        }\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle\n          id=\"alert-dialog-slide-title\"\n          style={{ textAlign: \"center\" }}\n        >\n          Validation\n        </DialogTitle>\n        <Divider />\n        <DialogContent>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-around\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item>\n              <FailSuccess />\n            </Grid>\n            <Grid item>\n              <DialogContentText id=\"alert-dialog-slide-description\">\n                Result of Validation: {validation}\n              </DialogContentText>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() =>\n              setOpenPopups((C) => ({ ...C, validationAssembly: false }))\n            }\n            color=\"primary\"\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custominput.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/successlottly.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/userinputUtils/faillottly.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/MultipleCheck.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/addiseq.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/customShop.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/genbank.tsx",["270","271","272"],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/SBOL.tsx",["273"],"import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport UploadIMG from \"./uploadIMG\";\nimport { Typography } from \"@material-ui/core\";\nimport { ApiEndpoint } from \"../../../../../Api\";\nimport { v4 as uuid } from \"uuid\";\nimport { BasicPart, BasicPartType } from \"../../../../../generated-sources\";\n\ninterface Props {\n  addiseq: boolean;\n  setUploadedFile: React.Dispatch<React.SetStateAction<BasicPart | undefined>>;\n  setCatchError: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const SBOL: React.FC<Props> = ({\n  addiseq,\n  setUploadedFile,\n  setCatchError,\n}) => {\n  async function ValidateFileUpload(dataString: string, filename: string) {\n    const response = await fetch(\n      ApiEndpoint +\n        \"fileupload/singular?file=\" +\n        JSON.stringify(dataString) +\n        \"&type=SBOL&addiseq=\" +\n        String(addiseq)\n    );\n    const result = await response.json();\n    if (result.seq) {\n      setUploadedFile({\n        id: uuid(),\n        seq: result.seq,\n        label: filename,\n        collection: \"\",\n        type: BasicPartType.UploadSingle,\n      });\n      setCatchError(\"\");\n    } else {\n      setCatchError(result.error);\n    }\n  }\n\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: any) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        const binaryStr = reader.result;\n        if (binaryStr !== null && typeof binaryStr !== \"string\") {\n          const dataString = JSON.stringify(\n            Array.from(new Uint8Array(binaryStr))\n          );\n          const b64string = btoa(dataString);\n          ValidateFileUpload(b64string, file.path);\n        }\n        reader.readAsArrayBuffer(file);\n      };\n    });\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n  const { ref, ...rootProps } = getRootProps();\n\n  return (\n    <RootRef rootRef={ref}>\n      <Paper {...rootProps} variant=\"outlined\">\n        <input {...getInputProps()} />\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item>\n            <UploadIMG />\n          </Grid>\n          <Grid item>\n            <Typography>\n              Drag and drop some files here, or click to select files\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </RootRef>\n  );\n};\n",["274","275"],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/custominput/custompl.Components/uploadIMG.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardCopyable.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/shoppingbag.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/successLotty.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/bagitemmodal.tsx",["276","277","278","279","280"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n// @ts-ignore\nimport { SeqViz } from \"seqviz\";\nimport { ApiEndpoint } from \"../../../../../Api\";\nimport { BasicPart } from \"../../../../../generated-sources\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n  switch: {\n    paddingLeft: \"10%\",\n  },\n  toggle: {\n    background: \"white\",\n    borderRadius: \"5px\",\n  },\n  SeqVizDiv: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  item: BasicPart;\n}\n\nexport const BagItemModal: React.FC<Props> = ({ open, handleClose, item }) => {\n  const classes = useStyles();\n  const [DnaViewerString, setDnaViewerString] = useState<string>(\"\");\n  const [viewType, setViewType] = useState<\"DnaFeatureViewer\" | \"Seqviz\">(\n    \"Seqviz\"\n  );\n  const [label, setLabel] = useState([]);\n  const [selectedQualifier, setSelectedQualifier] = useState(\"Feature\");\n  const [returnedSeq, setReturnedSeq] = useState(\"\");\n  const [annotationsSet, setAnnotationsSet] = useState([]);\n  const userWidth =\n    (window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.body.clientWidth) - 65;\n  const userHeight =\n    (window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.body.clientHeight) - 120;\n\n  type ViewMethod = \"DnaFeatureViewer\" | \"Seqviz\";\n  const handleViewTypeChange = (event: any, newMethod: ViewMethod) => {\n    if ([\"DnaFeatureViewer\", \"Seqviz\"].indexOf(newMethod) >= 0) {\n      if (newMethod === viewType) return;\n      else setViewType(newMethod);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!open) {\n      setLabel([]);\n      setSelectedQualifier(\"Feature\");\n      setViewType(\"Seqviz\");\n    } else {\n      (async () => {\n        const responselabels = await fetch(ApiEndpoint + \"viewpartlabels\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(item),\n        });\n        const resultlabels = await responselabels.json();\n        setLabel(resultlabels);\n      })();\n      (async () => {\n        const DnaFeatureViewer = await fetch(ApiEndpoint + \"dnafeatureviewer\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(item),\n        });\n        const dnafeatureviewer_response = await DnaFeatureViewer.json();\n        setDnaViewerString(dnafeatureviewer_response.base64image);\n        console.log(dnafeatureviewer_response);\n      })();\n    }\n  }, [open]);\n\n  function random_color() {\n    const colorCodes = [\n      \"#9DEAED\", // cyan\n      \"#8FDE8C\", // green\n      \"#CFF283\", // light green\n      \"#8CDEBD\", // teal\n      \"#F0A3CE\", // pink\n      \"#F7C672\", // orange\n      \"#F07F7F\", // red\n      \"#FAA887\", // red-orange\n      \"#F099F7\", // magenta\n      \"#C59CFF\", // purple\n      \"#6B81FF\", // blue\n      \"#85A6FF\", // light blue\n    ];\n    return colorCodes[Math.floor(Math.random() * colorCodes.length)];\n  }\n\n  function process(entry: any) {\n    if (entry)\n      return {\n        name: entry.name,\n        start: entry.start,\n        end: entry.end,\n        direction: entry.direction,\n        color: random_color(),\n      };\n    else return;\n  }\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        ApiEndpoint +\n          \"returnseqann?qualifier=\" +\n          JSON.stringify(selectedQualifier),\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(item),\n        }\n      );\n      try {\n        const result = await response.json();\n        var filtered = result.annotated.filter(Boolean);\n        var processed = filtered.map(process);\n        setAnnotationsSet(processed);\n        setReturnedSeq(result.seq);\n      } catch {\n        console.log(\"error filtering\");\n      }\n    })();\n  }, [selectedQualifier]);\n\n  const SeqVizComponent = () => {\n    if (selectedQualifier === \"Feature\") {\n      return (\n        <SeqViz\n          name=\"J23100\"\n          // file={item ? item.binaryString : null}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    } else {\n      return (\n        <SeqViz\n          name=\"item\"\n          seq={returnedSeq}\n          annotations={annotationsSet}\n          viewer=\"linear\"\n          style={{ height: userHeight, width: userWidth }}\n        />\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        fullScreen\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h5\" className={classes.title}>\n              {item ? item.label : \"\"}\n            </Typography>\n            {viewType === \"Seqviz\" ? (\n              <>\n                <Typography variant=\"h6\" className={classes.title}>\n                  Current Annotation: {selectedQualifier}\n                </Typography>\n                <div>\n                  <Autocomplete\n                    color=\"secondary\"\n                    id=\"item-qualifiers\"\n                    options={label}\n                    getOptionLabel={(option) => option}\n                    value={selectedQualifier}\n                    onChange={(event, newValue) => {\n                      if (newValue !== null) {\n                        setSelectedQualifier(newValue);\n                      }\n                    }}\n                    style={{\n                      width: 400,\n                      background: \"white\",\n                      borderRadius: \"5px\",\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Search Qualifiers to change Annotation...\"\n                        variant=\"filled\"\n                      />\n                    )}\n                  />\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n            <div className={classes.switch}>\n              <div className={classes.toggle}>\n                <ToggleButtonGroup\n                  color=\"primary\"\n                  value={viewType}\n                  exclusive\n                  onChange={handleViewTypeChange}\n                  aria-label=\"text alignment\"\n                >\n                  <ToggleButton value=\"Seqviz\">Seqviz</ToggleButton>\n                  {item.collection !== \"BASIC_BIOLEGIO_LINKERS\" ? (\n                    <ToggleButton value=\"DnaFeatureViewer\">\n                      DnaFeatureViewer\n                    </ToggleButton>\n                  ) : (\n                    <ToggleButton disabled value=\"DnaFeatureViewer\">\n                      DnaFeatureViewer\n                    </ToggleButton>\n                  )}\n                </ToggleButtonGroup>\n              </div>\n            </div>\n          </Toolbar>\n        </AppBar>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            The selected part is from the collection:{\" \"}\n            {item ? item.collection : \"Custom\"}\n          </DialogContentText>\n          {viewType === \"Seqviz\" ? (\n            <div className={classes.SeqVizDiv}>\n              <SeqVizComponent />\n            </div>\n          ) : (\n            <>\n              <img\n                width=\"100%\"\n                src={`data:image/jpeg;base64,${DnaViewerString}`}\n              />\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/plasmid/plasmid.Components/combinatorialPopup.tsx",["281"],"import React from \"react\";\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport Switch from \"@material-ui/core/Switch\";\nimport WifiIcon from \"@material-ui/icons/Wifi\";\nimport BluetoothIcon from \"@material-ui/icons/Bluetooth\";\nimport { BasicPart } from \"../../../../../generated-sources\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\ninterface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\ninterface Props {\n  item: BasicPart;\n  COLLECTION: BasicPart[];\n  COLLECTION2: BasicPart[];\n  open: boolean;\n  handleClose: () => void;\n}\n\nexport const CustomizedDialogs: React.FC<Props> = ({\n  item,\n  COLLECTION,\n  COLLECTION2,\n  open,\n  handleClose,\n}) => {\n  const list_of_original_checked = () => {\n    if (item.combinatorial) {\n      const returnitem = item?.combinatorialParts?.map(\n        (item: any) => item.label\n      );\n      if (returnitem) {\n        console.log(returnitem);\n        return returnitem;\n      } else {\n        return [item.label];\n      }\n    } else {\n      return [item.label];\n    }\n  };\n  const [checked, setChecked] = React.useState(list_of_original_checked);\n\n  console.log(item);\n  console.log(item?.combinatorialParts?.map((item: any) => item.label));\n\n  const handleToggle = (value: string) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const saveCombinatorialChanges = () => {\n    handleClose();\n    if (checked.length >= 2) {\n      item.combinatorial = true;\n      item.combinatorialParts = COLLECTION.filter((item) =>\n        checked.includes(item.label)\n      );\n    } else {\n      item.combinatorial = false;\n      item.combinatorialParts = [];\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Turn {item.label} Combinatorial\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            For the parts below which you would like to appear in this\n            combinatorial position toggle the switch, if you would like to\n            choose between more parts add more parts to you shopping bag from\n            file upload or from collections.\n          </Typography>\n          <List subheader={<ListSubheader>Settings</ListSubheader>}>\n            {COLLECTION.map((collectionItem, index) => (\n              <ListItem>\n                <ListItemIcon>\n                  <BluetoothIcon />\n                </ListItemIcon>\n                <ListItemText\n                  id=\"switch-list-label-bluetooth\"\n                  primary={collectionItem.label}\n                />\n                <ListItemSecondaryAction>\n                  <Switch\n                    edge=\"end\"\n                    onChange={handleToggle(collectionItem?.label || \"\")}\n                    checked={checked.indexOf(collectionItem.label) !== -1}\n                    inputProps={{\n                      \"aria-labelledby\": \"switch-list-label-bluetooth\",\n                    }}\n                  />\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={saveCombinatorialChanges} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default CustomizedDialogs;\n","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/standardShop.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/searchPart.tsx",["282","283"],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/userinput/standardinput/standardpl.Components/seachCollection.tsx",["284","285","286"],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/PDF.Components/pdf.tsx",["287"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { API, ApiEndpoint } from \"../../../../Api\";\nimport { BasicAssembly } from \"../../../../generated-sources\";\nimport { returnFilesFromJsonAssemblyArray } from \"../../../../utils/getFilesFromParts\";\nimport saveAs from \"file-saver\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  media: {\n    height: 140,\n  },\n  downloadButton: {\n    width: \"100%\",\n    padding: \"5px\",\n  },\n});\n\ninterface Props {\n  currentBuild: BasicAssembly[];\n}\n\nexport const PdfCard: React.FC<Props> = ({ currentBuild }) => {\n  const classes = useStyles();\n\n  const downloadBuildJson = async () => {\n    const response = await API.buildPdfInstructionsBuildPdfInstructionsPost(\n      JSON.stringify(currentBuild),\n      returnFilesFromJsonAssemblyArray(currentBuild)\n    );\n    console.log(response);\n    console.log(response.data);\n    var blob = new Blob([response.data], {\n      type: \"application/pdf\",\n    });\n    saveAs(blob, \"assembly-instructions.pdf\");\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardContent style={{ height: \"100px\" }}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            PDF\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            PDF instructions to build the assemblies manually within the lab\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <Button\n        onClick={downloadBuildJson}\n        className={classes.downloadButton}\n        variant=\"contained\"\n        color=\"secondary\"\n      >\n        Download PDF\n      </Button>\n    </Card>\n  );\n};\n","/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/ECHO.Components/echo.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/UniqueAssemblies.Components/UniqueAssemblies.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/UniqueParts.Components/UniqueParts.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/JSON.Components/JSONCard.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/components/designer/export/CSV.Components/csvcard.tsx",[],"/Users/benedictcarling/basicsynbio_frontend/src/Api.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/index.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/configuration.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/api.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/base.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/generated-sources/common.ts",[],"/Users/benedictcarling/basicsynbio_frontend/src/utils/getFilesFromParts.ts",[],{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":23,"column":7,"nodeType":"294","messageId":"295","endLine":23,"endColumn":17},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"296","severity":1,"message":"297","line":1,"column":8,"nodeType":"294","messageId":"295","endLine":1,"endColumn":13},{"ruleId":"296","severity":1,"message":"298","line":6,"column":9,"nodeType":"294","messageId":"295","endLine":6,"endColumn":21},{"ruleId":"296","severity":1,"message":"298","line":22,"column":9,"nodeType":"294","messageId":"295","endLine":22,"endColumn":21},{"ruleId":"296","severity":1,"message":"299","line":1,"column":41,"nodeType":"294","messageId":"295","endLine":1,"endColumn":54},{"ruleId":"296","severity":1,"message":"300","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":19},{"ruleId":"296","severity":1,"message":"301","line":2,"column":21,"nodeType":"294","messageId":"295","endLine":2,"endColumn":29},{"ruleId":"296","severity":1,"message":"302","line":25,"column":3,"nodeType":"294","messageId":"295","endLine":25,"endColumn":16},{"ruleId":"303","severity":1,"message":"304","line":71,"column":36,"nodeType":"305","messageId":"306","endLine":71,"endColumn":38},{"ruleId":"303","severity":1,"message":"307","line":76,"column":24,"nodeType":"305","messageId":"306","endLine":76,"endColumn":26},{"ruleId":"303","severity":1,"message":"304","line":163,"column":60,"nodeType":"305","messageId":"306","endLine":163,"endColumn":62},{"ruleId":"303","severity":1,"message":"304","line":178,"column":60,"nodeType":"305","messageId":"306","endLine":178,"endColumn":62},{"ruleId":"303","severity":1,"message":"304","line":181,"column":38,"nodeType":"305","messageId":"306","endLine":181,"endColumn":40},{"ruleId":"296","severity":1,"message":"308","line":188,"column":13,"nodeType":"294","messageId":"295","endLine":188,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":189,"column":42,"nodeType":"311","messageId":"312","endLine":189,"endColumn":44},{"ruleId":"303","severity":1,"message":"307","line":192,"column":71,"nodeType":"305","messageId":"306","endLine":192,"endColumn":73},{"ruleId":"303","severity":1,"message":"304","line":214,"column":60,"nodeType":"305","messageId":"306","endLine":214,"endColumn":62},{"ruleId":"313","severity":1,"message":"314","line":117,"column":6,"nodeType":"315","endLine":117,"endColumn":31,"suggestions":"316"},{"ruleId":"313","severity":1,"message":"317","line":175,"column":6,"nodeType":"315","endLine":175,"endColumn":53,"suggestions":"318"},{"ruleId":"319","severity":1,"message":"320","line":295,"column":15,"nodeType":"321","endLine":298,"endColumn":17},{"ruleId":"303","severity":1,"message":"304","line":46,"column":38,"nodeType":"305","messageId":"306","endLine":46,"endColumn":40},{"ruleId":"303","severity":1,"message":"307","line":51,"column":26,"nodeType":"305","messageId":"306","endLine":51,"endColumn":28},{"ruleId":"303","severity":1,"message":"304","line":74,"column":60,"nodeType":"305","messageId":"306","endLine":74,"endColumn":62},{"ruleId":"303","severity":1,"message":"304","line":78,"column":38,"nodeType":"305","messageId":"306","endLine":78,"endColumn":40},{"ruleId":"296","severity":1,"message":"308","line":85,"column":13,"nodeType":"294","messageId":"295","endLine":85,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":86,"column":42,"nodeType":"311","messageId":"312","endLine":86,"endColumn":44},{"ruleId":"303","severity":1,"message":"307","line":89,"column":71,"nodeType":"305","messageId":"306","endLine":89,"endColumn":73},{"ruleId":"303","severity":1,"message":"304","line":133,"column":60,"nodeType":"305","messageId":"306","endLine":133,"endColumn":62},{"ruleId":"303","severity":1,"message":"304","line":151,"column":60,"nodeType":"305","messageId":"306","endLine":151,"endColumn":62},{"ruleId":"296","severity":1,"message":"322","line":201,"column":7,"nodeType":"294","messageId":"295","endLine":201,"endColumn":13},{"ruleId":"313","severity":1,"message":"323","line":203,"column":6,"nodeType":"315","endLine":203,"endColumn":37,"suggestions":"324"},{"ruleId":"296","severity":1,"message":"325","line":8,"column":16,"nodeType":"294","messageId":"295","endLine":8,"endColumn":20},{"ruleId":"296","severity":1,"message":"302","line":14,"column":3,"nodeType":"294","messageId":"295","endLine":14,"endColumn":16},{"ruleId":"313","severity":1,"message":"326","line":117,"column":5,"nodeType":"315","endLine":117,"endColumn":35,"suggestions":"327"},{"ruleId":"313","severity":1,"message":"326","line":64,"column":6,"nodeType":"315","endLine":64,"endColumn":8,"suggestions":"328"},{"ruleId":"288","replacedBy":"329"},{"ruleId":"290","replacedBy":"330"},{"ruleId":"296","severity":1,"message":"331","line":14,"column":8,"nodeType":"294","messageId":"295","endLine":14,"endColumn":18},{"ruleId":"296","severity":1,"message":"332","line":20,"column":8,"nodeType":"294","messageId":"295","endLine":20,"endColumn":19},{"ruleId":"313","severity":1,"message":"333","line":117,"column":6,"nodeType":"315","endLine":117,"endColumn":12,"suggestions":"334"},{"ruleId":"313","severity":1,"message":"335","line":173,"column":6,"nodeType":"315","endLine":173,"endColumn":25,"suggestions":"336"},{"ruleId":"319","severity":1,"message":"320","line":292,"column":15,"nodeType":"321","endLine":295,"endColumn":17},{"ruleId":"296","severity":1,"message":"337","line":23,"column":8,"nodeType":"294","messageId":"295","endLine":23,"endColumn":16},{"ruleId":"296","severity":1,"message":"338","line":23,"column":11,"nodeType":"294","messageId":"295","endLine":23,"endColumn":16},{"ruleId":"313","severity":1,"message":"339","line":58,"column":6,"nodeType":"315","endLine":58,"endColumn":35,"suggestions":"340"},{"ruleId":"296","severity":1,"message":"341","line":22,"column":8,"nodeType":"294","messageId":"295","endLine":22,"endColumn":13},{"ruleId":"313","severity":1,"message":"342","line":101,"column":6,"nodeType":"315","endLine":101,"endColumn":15,"suggestions":"343"},{"ruleId":"313","severity":1,"message":"344","line":107,"column":6,"nodeType":"315","endLine":107,"endColumn":12,"suggestions":"345"},{"ruleId":"296","severity":1,"message":"346","line":8,"column":15,"nodeType":"294","messageId":"295","endLine":8,"endColumn":26},"no-native-reassign",["347"],"no-negated-in-lhs",["348"],"no-unused-vars","'components' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'axios' is defined but never used.","'storageNames' is assigned a value but never used.","'PayloadAction' is defined but never used.","'RootState' is defined but never used.","'AppThunk' is defined but never used.","'BasicPartType' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'old_shopping' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'shoppingBagItems'. Either include it or remove the dependency array.","ArrayExpression",["349"],"React Hook React.useEffect has missing dependencies: 'process' and 'shoppingBagItems'. Either include them or remove the dependency array.",["350"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'active' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'setValidated' and 'shoppingBagItems'. Either include them or remove the dependency array. If 'setValidated' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["351"],"'uuid' is defined but never used.","React Hook useCallback has a missing dependency: 'ValidateFileUpload'. Either include it or remove the dependency array.",["352"],["353"],["347"],["348"],"'SearchIcon' is defined but never used.","'ButtonGroup' is defined but never used.","React Hook React.useEffect has a missing dependency: 'item'. Either include it or remove the dependency array.",["354"],"React Hook React.useEffect has missing dependencies: 'item' and 'process'. Either include them or remove the dependency array.",["355"],"'WifiIcon' is defined but never used.","'names' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'collections' and 'setPartOptions'. Either include them or remove the dependency array. If 'setPartOptions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["356"],"'fetch' is defined but never used.","React Hook React.useEffect has missing dependencies: 'names' and 'setCollections'. Either include them or remove the dependency array. If 'setCollections' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["357"],"React Hook React.useEffect has a missing dependency: 'setCollections'. Either include it or remove the dependency array. If 'setCollections' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["358"],"'ApiEndpoint' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},"Update the dependencies array to be: [openPopups.viewAssembly, shoppingBagItems]",{"range":"379","text":"380"},"Update the dependencies array to be: [selectedSeqQualifier, openPopups.viewAssembly, shoppingBagItems, process]",{"range":"381","text":"382"},"Update the dependencies array to be: [openPopups.validationAssembly, setValidated, shoppingBagItems]",{"range":"383","text":"384"},"Update the dependencies array to be: [ValidateFileUpload, multiplePartLinkers, addiseq]",{"range":"385","text":"386"},"Update the dependencies array to be: [ValidateFileUpload]",{"range":"387","text":"388"},"Update the dependencies array to be: [item, open]",{"range":"389","text":"390"},"Update the dependencies array to be: [item, process, selectedQualifier]",{"range":"391","text":"392"},"Update the dependencies array to be: [loading, clickedCollections, collections, setPartOptions]",{"range":"393","text":"394"},"Update the dependencies array to be: [loading, names, setCollections]",{"range":"395","text":"396"},"Update the dependencies array to be: [open, setCollections]",{"range":"397","text":"398"},[3802,3827],"[openPopups.viewAssembly, shoppingBagItems]",[5280,5327],"[selectedSeqQualifier, openPopups.viewAssembly, shoppingBagItems, process]",[6998,7029],"[openPopups.validationAssembly, setValidated, shoppingBagItems]",[3503,3533],"[ValidateFileUpload, multiplePartLinkers, addiseq]",[2028,2030],"[ValidateFileUpload]",[3891,3897],"[item, open]",[5277,5296],"[item, process, selectedQualifier]",[1702,1731],"[loading, clickedCollections, collections, setPartOptions]",[2408,2417],"[loading, names, setCollections]",[2501,2507],"[open, setCollections]"]