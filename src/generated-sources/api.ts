/* tslint:disable */
/* eslint-disable */
/**
 * BasicSynBio API
 *  A REST API for BasicSynBio that allows the BasicSynBio python package to be consumed by any language - the primary use case for this is own own BasicSynBio frontend application. ðŸš€  [Python Package](https://pypi.org/project/basicsynbio/) ---  [Interactive Web App](https://basicsynbio.web.app)  Below is a list of endpoints that can be accessed via the API, each endpoint can be simulated within their corresponding boxes. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BasicBuild
 */
export interface BasicBuild {
    /**
     * 
     * @type {string}
     * @memberof BasicBuild
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof BasicBuild
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicBuild
     */
    description?: string;
    /**
     * 
     * @type {Array<BasicPart>}
     * @memberof BasicBuild
     */
    parts?: Array<BasicPart>;
}
/**
 * 
 * @export
 * @interface BasicPart
 */
export interface BasicPart {
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    accessor?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    binaryString?: string;
    /**
     * 
     * @type {any}
     * @memberof BasicPart
     */
    base64?: any | null;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    collection?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    label?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BasicPart
     */
    multiple?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BasicPart
     */
    index?: number;
    /**
     * 
     * @type {string}
     * @memberof BasicPart
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Collection
     */
    availableVersions: Array<string>;
    /**
     * 
     * @type {Array<CollectionVersionInstance>}
     * @memberof Collection
     */
    versions: Array<CollectionVersionInstance>;
}
/**
 * 
 * @export
 * @interface CollectionVersionInstance
 */
export interface CollectionVersionInstance {
    /**
     * 
     * @type {string}
     * @memberof CollectionVersionInstance
     */
    name: string;
    /**
     * 
     * @type {Array<BasicPart>}
     * @memberof CollectionVersionInstance
     */
    parts: Array<BasicPart>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum FileType {
    Genbank = 'genbank',
    Fasta = 'fasta',
    Sbol = 'SBOL'
}

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ResponseCollectionsData
 */
export interface ResponseCollectionsData {
    /**
     * 
     * @type {Array<Collection>}
     * @memberof ResponseCollectionsData
     */
    data: Array<Collection>;
}
/**
 * 
 * @export
 * @interface ResponseCollectionsName
 */
export interface ResponseCollectionsName {
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseCollectionsName
     */
    data: Array<string>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ## Build CSVs  This endpoint takes a list of basicBuild objects and returns a CSV representation of the same objects.
         * @summary Build Csvs
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildCsvsBuildcsvsPost: async (basicBuild: Array<BasicBuild>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicBuild' is not null or undefined
            assertParamExists('buildCsvsBuildcsvsPost', 'basicBuild', basicBuild)
            const localVarPath = `/buildcsvs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Build Echo Instructions  This endpoint takes a list of basicBuild objects and returns the Echo robot instructions to perform the clip step of BASIC DNA assembly.
         * @summary Build Echo Instructions
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildEchoInstructionsBuildechoinstructionsPost: async (basicBuild: Array<BasicBuild>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicBuild' is not null or undefined
            assertParamExists('buildEchoInstructionsBuildechoinstructionsPost', 'basicBuild', basicBuild)
            const localVarPath = `/buildechoinstructions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Build JSON  This endpoint takes a list of basicBuild objects and returns a JSON serialised version of the same objects.
         * @summary Build Json
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildJsonBuildjsonPost: async (basicBuild: Array<BasicBuild>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicBuild' is not null or undefined
            assertParamExists('buildJsonBuildjsonPost', 'basicBuild', basicBuild)
            const localVarPath = `/buildjson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Build PDF Instructions  This endpoint takes a list of basicBuild objects and returns a PDF for the manual assembly within a lab of the BasicBuild object.
         * @summary Build Pdf Instructions
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPdfInstructionsBuildPdfInstructionsPost: async (basicBuild: Array<BasicBuild>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicBuild' is not null or undefined
            assertParamExists('buildPdfInstructionsBuildPdfInstructionsPost', 'basicBuild', basicBuild)
            const localVarPath = `/build_pdf_instructions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Build Unique Parts  This endpoint takes a list of basicBuild objects and returns unique parts within each BasicAssembly as a genbank file.
         * @summary Build Unique Parts As Genbank
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildUniquePartsAsGenbankBuilduniquepartsPost: async (basicBuild: Array<BasicBuild>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicBuild' is not null or undefined
            assertParamExists('buildUniquePartsAsGenbankBuilduniquepartsPost', 'basicBuild', basicBuild)
            const localVarPath = `/builduniqueparts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Build Unique Assemblies  This endpoint takes a list of basicBuild objects and returns unique assemblies within the BasicBuild as a genbank file.
         * @summary Buils Unique Assemblies As Genbank
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost: async (basicBuild: Array<BasicBuild>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicBuild' is not null or undefined
            assertParamExists('builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost', 'basicBuild', basicBuild)
            const localVarPath = `/builduniqueassemblies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicBuild, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dnafeaturesviewer For Assemblies
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost: async (basicPart: Array<BasicPart>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicPart' is not null or undefined
            assertParamExists('dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost', 'basicPart', basicPart)
            const localVarPath = `/dnafeatureviewer_assembly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicPart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dnafeatureviewer
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnafeatureviewerDnafeatureviewerPost: async (basicPart: BasicPart, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicPart' is not null or undefined
            assertParamExists('dnafeatureviewerDnafeatureviewerPost', 'basicPart', basicPart)
            const localVarPath = `/dnafeatureviewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicPart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Collection Data  Returns a list of the available basicynbio part collections and the data within them to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
         * @summary Get Collection Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionDataCollectionsDataGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Collection Names  Returns a list of the available basicynbio part collections to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
         * @summary Get Collection Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionNamesCollectionsNamesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections/names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Multiple File Upload  Uploads a file containing more than one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
         * @summary Multiple File Upload
         * @param {FileType} type 
         * @param {boolean} addiseq 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multipleFileUploadFileuploadMultiplePost: async (type: FileType, addiseq: boolean, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('multipleFileUploadFileuploadMultiplePost', 'type', type)
            // verify required parameter 'addiseq' is not null or undefined
            assertParamExists('multipleFileUploadFileuploadMultiplePost', 'addiseq', addiseq)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('multipleFileUploadFileuploadMultiplePost', 'file', file)
            const localVarPath = `/fileupload/multiple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (addiseq !== undefined) {
                localVarQueryParameter['addiseq'] = addiseq;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## API Root  Root endpoint for health check, returns basic message.
         * @summary Root Endpoint For Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootEndpointForHealthCheckGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Singular File Upload  Uploads a file containing only one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
         * @summary Singular File Upload
         * @param {FileType} type 
         * @param {boolean} addiseq 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singularFileUploadFileuploadSingularPost: async (type: FileType, addiseq: boolean, file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('singularFileUploadFileuploadSingularPost', 'type', type)
            // verify required parameter 'addiseq' is not null or undefined
            assertParamExists('singularFileUploadFileuploadSingularPost', 'addiseq', addiseq)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('singularFileUploadFileuploadSingularPost', 'file', file)
            const localVarPath = `/fileupload/singular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (addiseq !== undefined) {
                localVarQueryParameter['addiseq'] = addiseq;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## Validate  This endpoint ensures that a input list of basicParts can successfully build a basic assembly.
         * @summary Validate Assembly
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateAssemblyValidatePost: async (basicPart: Array<BasicPart>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicPart' is not null or undefined
            assertParamExists('validateAssemblyValidatePost', 'basicPart', basicPart)
            const localVarPath = `/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicPart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View Part Labels
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPartLabelsViewpartlabelsPost: async (basicPart: BasicPart, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicPart' is not null or undefined
            assertParamExists('viewPartLabelsViewpartlabelsPost', 'basicPart', basicPart)
            const localVarPath = `/viewpartlabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicPart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View Sequence Annotations
         * @param {string} qualifier 
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSequenceAnnotationsReturnseqannPost: async (qualifier: string, basicPart: BasicPart, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualifier' is not null or undefined
            assertParamExists('viewSequenceAnnotationsReturnseqannPost', 'qualifier', qualifier)
            // verify required parameter 'basicPart' is not null or undefined
            assertParamExists('viewSequenceAnnotationsReturnseqannPost', 'basicPart', basicPart)
            const localVarPath = `/returnseqann`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (qualifier !== undefined) {
                localVarQueryParameter['Qualifier'] = qualifier;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicPart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View Sequence Labels
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSequenceLabelsViewseqlabelsPost: async (basicPart: Array<BasicPart>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'basicPart' is not null or undefined
            assertParamExists('viewSequenceLabelsViewseqlabelsPost', 'basicPart', basicPart)
            const localVarPath = `/viewseqlabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicPart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * ## Build CSVs  This endpoint takes a list of basicBuild objects and returns a CSV representation of the same objects.
         * @summary Build Csvs
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildCsvsBuildcsvsPost(basicBuild: Array<BasicBuild>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildCsvsBuildcsvsPost(basicBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Build Echo Instructions  This endpoint takes a list of basicBuild objects and returns the Echo robot instructions to perform the clip step of BASIC DNA assembly.
         * @summary Build Echo Instructions
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildEchoInstructionsBuildechoinstructionsPost(basicBuild: Array<BasicBuild>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildEchoInstructionsBuildechoinstructionsPost(basicBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Build JSON  This endpoint takes a list of basicBuild objects and returns a JSON serialised version of the same objects.
         * @summary Build Json
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildJsonBuildjsonPost(basicBuild: Array<BasicBuild>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildJsonBuildjsonPost(basicBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Build PDF Instructions  This endpoint takes a list of basicBuild objects and returns a PDF for the manual assembly within a lab of the BasicBuild object.
         * @summary Build Pdf Instructions
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildPdfInstructionsBuildPdfInstructionsPost(basicBuild: Array<BasicBuild>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildPdfInstructionsBuildPdfInstructionsPost(basicBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Build Unique Parts  This endpoint takes a list of basicBuild objects and returns unique parts within each BasicAssembly as a genbank file.
         * @summary Build Unique Parts As Genbank
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildUniquePartsAsGenbankBuilduniquepartsPost(basicBuild: Array<BasicBuild>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildUniquePartsAsGenbankBuilduniquepartsPost(basicBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Build Unique Assemblies  This endpoint takes a list of basicBuild objects and returns unique assemblies within the BasicBuild as a genbank file.
         * @summary Buils Unique Assemblies As Genbank
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost(basicBuild: Array<BasicBuild>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost(basicBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dnafeaturesviewer For Assemblies
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost(basicPart: Array<BasicPart>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost(basicPart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dnafeatureviewer
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dnafeatureviewerDnafeatureviewerPost(basicPart: BasicPart, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dnafeatureviewerDnafeatureviewerPost(basicPart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Collection Data  Returns a list of the available basicynbio part collections and the data within them to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
         * @summary Get Collection Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionDataCollectionsDataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionsData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionDataCollectionsDataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Collection Names  Returns a list of the available basicynbio part collections to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
         * @summary Get Collection Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionNamesCollectionsNamesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionsName>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionNamesCollectionsNamesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Multiple File Upload  Uploads a file containing more than one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
         * @summary Multiple File Upload
         * @param {FileType} type 
         * @param {boolean} addiseq 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async multipleFileUploadFileuploadMultiplePost(type: FileType, addiseq: boolean, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.multipleFileUploadFileuploadMultiplePost(type, addiseq, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## API Root  Root endpoint for health check, returns basic message.
         * @summary Root Endpoint For Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootEndpointForHealthCheckGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootEndpointForHealthCheckGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Singular File Upload  Uploads a file containing only one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
         * @summary Singular File Upload
         * @param {FileType} type 
         * @param {boolean} addiseq 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singularFileUploadFileuploadSingularPost(type: FileType, addiseq: boolean, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singularFileUploadFileuploadSingularPost(type, addiseq, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ## Validate  This endpoint ensures that a input list of basicParts can successfully build a basic assembly.
         * @summary Validate Assembly
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateAssemblyValidatePost(basicPart: Array<BasicPart>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateAssemblyValidatePost(basicPart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary View Part Labels
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPartLabelsViewpartlabelsPost(basicPart: BasicPart, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPartLabelsViewpartlabelsPost(basicPart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary View Sequence Annotations
         * @param {string} qualifier 
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSequenceAnnotationsReturnseqannPost(qualifier: string, basicPart: BasicPart, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSequenceAnnotationsReturnseqannPost(qualifier, basicPart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary View Sequence Labels
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSequenceLabelsViewseqlabelsPost(basicPart: Array<BasicPart>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSequenceLabelsViewseqlabelsPost(basicPart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * ## Build CSVs  This endpoint takes a list of basicBuild objects and returns a CSV representation of the same objects.
         * @summary Build Csvs
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildCsvsBuildcsvsPost(basicBuild: Array<BasicBuild>, options?: any): AxiosPromise<any> {
            return localVarFp.buildCsvsBuildcsvsPost(basicBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Build Echo Instructions  This endpoint takes a list of basicBuild objects and returns the Echo robot instructions to perform the clip step of BASIC DNA assembly.
         * @summary Build Echo Instructions
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildEchoInstructionsBuildechoinstructionsPost(basicBuild: Array<BasicBuild>, options?: any): AxiosPromise<any> {
            return localVarFp.buildEchoInstructionsBuildechoinstructionsPost(basicBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Build JSON  This endpoint takes a list of basicBuild objects and returns a JSON serialised version of the same objects.
         * @summary Build Json
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildJsonBuildjsonPost(basicBuild: Array<BasicBuild>, options?: any): AxiosPromise<any> {
            return localVarFp.buildJsonBuildjsonPost(basicBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Build PDF Instructions  This endpoint takes a list of basicBuild objects and returns a PDF for the manual assembly within a lab of the BasicBuild object.
         * @summary Build Pdf Instructions
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPdfInstructionsBuildPdfInstructionsPost(basicBuild: Array<BasicBuild>, options?: any): AxiosPromise<any> {
            return localVarFp.buildPdfInstructionsBuildPdfInstructionsPost(basicBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Build Unique Parts  This endpoint takes a list of basicBuild objects and returns unique parts within each BasicAssembly as a genbank file.
         * @summary Build Unique Parts As Genbank
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildUniquePartsAsGenbankBuilduniquepartsPost(basicBuild: Array<BasicBuild>, options?: any): AxiosPromise<any> {
            return localVarFp.buildUniquePartsAsGenbankBuilduniquepartsPost(basicBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Build Unique Assemblies  This endpoint takes a list of basicBuild objects and returns unique assemblies within the BasicBuild as a genbank file.
         * @summary Buils Unique Assemblies As Genbank
         * @param {Array<BasicBuild>} basicBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost(basicBuild: Array<BasicBuild>, options?: any): AxiosPromise<any> {
            return localVarFp.builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost(basicBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dnafeaturesviewer For Assemblies
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost(basicPart: Array<BasicPart>, options?: any): AxiosPromise<any> {
            return localVarFp.dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost(basicPart, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dnafeatureviewer
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dnafeatureviewerDnafeatureviewerPost(basicPart: BasicPart, options?: any): AxiosPromise<any> {
            return localVarFp.dnafeatureviewerDnafeatureviewerPost(basicPart, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Collection Data  Returns a list of the available basicynbio part collections and the data within them to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
         * @summary Get Collection Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionDataCollectionsDataGet(options?: any): AxiosPromise<ResponseCollectionsData> {
            return localVarFp.getCollectionDataCollectionsDataGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ## Collection Names  Returns a list of the available basicynbio part collections to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
         * @summary Get Collection Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionNamesCollectionsNamesGet(options?: any): AxiosPromise<ResponseCollectionsName> {
            return localVarFp.getCollectionNamesCollectionsNamesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ## Multiple File Upload  Uploads a file containing more than one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
         * @summary Multiple File Upload
         * @param {FileType} type 
         * @param {boolean} addiseq 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        multipleFileUploadFileuploadMultiplePost(type: FileType, addiseq: boolean, file: any, options?: any): AxiosPromise<any> {
            return localVarFp.multipleFileUploadFileuploadMultiplePost(type, addiseq, file, options).then((request) => request(axios, basePath));
        },
        /**
         * ## API Root  Root endpoint for health check, returns basic message.
         * @summary Root Endpoint For Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootEndpointForHealthCheckGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootEndpointForHealthCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ## Singular File Upload  Uploads a file containing only one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
         * @summary Singular File Upload
         * @param {FileType} type 
         * @param {boolean} addiseq 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singularFileUploadFileuploadSingularPost(type: FileType, addiseq: boolean, file: any, options?: any): AxiosPromise<any> {
            return localVarFp.singularFileUploadFileuploadSingularPost(type, addiseq, file, options).then((request) => request(axios, basePath));
        },
        /**
         * ## Validate  This endpoint ensures that a input list of basicParts can successfully build a basic assembly.
         * @summary Validate Assembly
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateAssemblyValidatePost(basicPart: Array<BasicPart>, options?: any): AxiosPromise<any> {
            return localVarFp.validateAssemblyValidatePost(basicPart, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View Part Labels
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPartLabelsViewpartlabelsPost(basicPart: BasicPart, options?: any): AxiosPromise<any> {
            return localVarFp.viewPartLabelsViewpartlabelsPost(basicPart, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View Sequence Annotations
         * @param {string} qualifier 
         * @param {BasicPart} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSequenceAnnotationsReturnseqannPost(qualifier: string, basicPart: BasicPart, options?: any): AxiosPromise<any> {
            return localVarFp.viewSequenceAnnotationsReturnseqannPost(qualifier, basicPart, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View Sequence Labels
         * @param {Array<BasicPart>} basicPart 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSequenceLabelsViewseqlabelsPost(basicPart: Array<BasicPart>, options?: any): AxiosPromise<any> {
            return localVarFp.viewSequenceLabelsViewseqlabelsPost(basicPart, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * ## Build CSVs  This endpoint takes a list of basicBuild objects and returns a CSV representation of the same objects.
     * @summary Build Csvs
     * @param {Array<BasicBuild>} basicBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public buildCsvsBuildcsvsPost(basicBuild: Array<BasicBuild>, options?: any) {
        return DefaultApiFp(this.configuration).buildCsvsBuildcsvsPost(basicBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Build Echo Instructions  This endpoint takes a list of basicBuild objects and returns the Echo robot instructions to perform the clip step of BASIC DNA assembly.
     * @summary Build Echo Instructions
     * @param {Array<BasicBuild>} basicBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public buildEchoInstructionsBuildechoinstructionsPost(basicBuild: Array<BasicBuild>, options?: any) {
        return DefaultApiFp(this.configuration).buildEchoInstructionsBuildechoinstructionsPost(basicBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Build JSON  This endpoint takes a list of basicBuild objects and returns a JSON serialised version of the same objects.
     * @summary Build Json
     * @param {Array<BasicBuild>} basicBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public buildJsonBuildjsonPost(basicBuild: Array<BasicBuild>, options?: any) {
        return DefaultApiFp(this.configuration).buildJsonBuildjsonPost(basicBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Build PDF Instructions  This endpoint takes a list of basicBuild objects and returns a PDF for the manual assembly within a lab of the BasicBuild object.
     * @summary Build Pdf Instructions
     * @param {Array<BasicBuild>} basicBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public buildPdfInstructionsBuildPdfInstructionsPost(basicBuild: Array<BasicBuild>, options?: any) {
        return DefaultApiFp(this.configuration).buildPdfInstructionsBuildPdfInstructionsPost(basicBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Build Unique Parts  This endpoint takes a list of basicBuild objects and returns unique parts within each BasicAssembly as a genbank file.
     * @summary Build Unique Parts As Genbank
     * @param {Array<BasicBuild>} basicBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public buildUniquePartsAsGenbankBuilduniquepartsPost(basicBuild: Array<BasicBuild>, options?: any) {
        return DefaultApiFp(this.configuration).buildUniquePartsAsGenbankBuilduniquepartsPost(basicBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Build Unique Assemblies  This endpoint takes a list of basicBuild objects and returns unique assemblies within the BasicBuild as a genbank file.
     * @summary Buils Unique Assemblies As Genbank
     * @param {Array<BasicBuild>} basicBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost(basicBuild: Array<BasicBuild>, options?: any) {
        return DefaultApiFp(this.configuration).builsUniqueAssembliesAsGenbankBuilduniqueassembliesPost(basicBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dnafeaturesviewer For Assemblies
     * @param {Array<BasicPart>} basicPart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost(basicPart: Array<BasicPart>, options?: any) {
        return DefaultApiFp(this.configuration).dnafeaturesviewerForAssembliesDnafeatureviewerAssemblyPost(basicPart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dnafeatureviewer
     * @param {BasicPart} basicPart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dnafeatureviewerDnafeatureviewerPost(basicPart: BasicPart, options?: any) {
        return DefaultApiFp(this.configuration).dnafeatureviewerDnafeatureviewerPost(basicPart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Collection Data  Returns a list of the available basicynbio part collections and the data within them to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
     * @summary Get Collection Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionDataCollectionsDataGet(options?: any) {
        return DefaultApiFp(this.configuration).getCollectionDataCollectionsDataGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Collection Names  Returns a list of the available basicynbio part collections to the user.  More infomation about part linker collections can be found at the [basicsynbio documentation](https://londonbiofoundry.github.io/basicsynbio/collections.html)
     * @summary Get Collection Names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionNamesCollectionsNamesGet(options?: any) {
        return DefaultApiFp(this.configuration).getCollectionNamesCollectionsNamesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Multiple File Upload  Uploads a file containing more than one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
     * @summary Multiple File Upload
     * @param {FileType} type 
     * @param {boolean} addiseq 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public multipleFileUploadFileuploadMultiplePost(type: FileType, addiseq: boolean, file: any, options?: any) {
        return DefaultApiFp(this.configuration).multipleFileUploadFileuploadMultiplePost(type, addiseq, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## API Root  Root endpoint for health check, returns basic message.
     * @summary Root Endpoint For Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootEndpointForHealthCheckGet(options?: any) {
        return DefaultApiFp(this.configuration).rootEndpointForHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Singular File Upload  Uploads a file containing only one sequence record to the server to return a JSON version of the same object for further processing in the basicsynbio interactive web app.
     * @summary Singular File Upload
     * @param {FileType} type 
     * @param {boolean} addiseq 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public singularFileUploadFileuploadSingularPost(type: FileType, addiseq: boolean, file: any, options?: any) {
        return DefaultApiFp(this.configuration).singularFileUploadFileuploadSingularPost(type, addiseq, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## Validate  This endpoint ensures that a input list of basicParts can successfully build a basic assembly.
     * @summary Validate Assembly
     * @param {Array<BasicPart>} basicPart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public validateAssemblyValidatePost(basicPart: Array<BasicPart>, options?: any) {
        return DefaultApiFp(this.configuration).validateAssemblyValidatePost(basicPart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View Part Labels
     * @param {BasicPart} basicPart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewPartLabelsViewpartlabelsPost(basicPart: BasicPart, options?: any) {
        return DefaultApiFp(this.configuration).viewPartLabelsViewpartlabelsPost(basicPart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View Sequence Annotations
     * @param {string} qualifier 
     * @param {BasicPart} basicPart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewSequenceAnnotationsReturnseqannPost(qualifier: string, basicPart: BasicPart, options?: any) {
        return DefaultApiFp(this.configuration).viewSequenceAnnotationsReturnseqannPost(qualifier, basicPart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View Sequence Labels
     * @param {Array<BasicPart>} basicPart 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewSequenceLabelsViewseqlabelsPost(basicPart: Array<BasicPart>, options?: any) {
        return DefaultApiFp(this.configuration).viewSequenceLabelsViewseqlabelsPost(basicPart, options).then((request) => request(this.axios, this.basePath));
    }
}


