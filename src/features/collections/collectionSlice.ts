import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { Collection } from "../../generated-sources";
import { retriveCollections } from "./collectionAPI";

const initialState: Collection[] = [];

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCollections = createAsyncThunk(
  "collections/fetchCollections",
  async () => {
    const response = await retriveCollections();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const collectionsSlice = createSlice({
  name: "collections",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchCollections.fulfilled, (state, action) => {
      state.push(...action.payload);
    });
  },
});

export default collectionsSlice.reducer;
